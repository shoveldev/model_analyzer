// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: grpc_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace Triton.MemoryAnalyzer.Client
{

    /// <summary>Holder for reflection information generated from grpc_service.proto</summary>
    public static partial class GrpcServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for grpc_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJncnBjX3NlcnZpY2UucHJvdG8SFm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIa",
            "CWFwaS5wcm90bxoUcmVxdWVzdF9zdGF0dXMucHJvdG8aE3NlcnZlcl9zdGF0",
            "dXMucHJvdG8iIwoNU3RhdHVzUmVxdWVzdBISCgptb2RlbF9uYW1lGAEgASgJ",
            "IowBCg5TdGF0dXNSZXNwb25zZRI9Cg5yZXF1ZXN0X3N0YXR1cxgBIAEoCzIl",
            "Lm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuUmVxdWVzdFN0YXR1cxI7Cg1zZXJ2",
            "ZXJfc3RhdHVzGAIgASgLMiQubnZpZGlhLmluZmVyZW5jZXNlcnZlci5TZXJ2",
            "ZXJTdGF0dXMiHQoNSGVhbHRoUmVxdWVzdBIMCgRtb2RlGAEgASgJIl8KDkhl",
            "YWx0aFJlc3BvbnNlEj0KDnJlcXVlc3Rfc3RhdHVzGAEgASgLMiUubnZpZGlh",
            "LmluZmVyZW5jZXNlcnZlci5SZXF1ZXN0U3RhdHVzEg4KBmhlYWx0aBgCIAEo",
            "CCKHAQoTTW9kZWxDb250cm9sUmVxdWVzdBISCgptb2RlbF9uYW1lGAEgASgJ",
            "Ej4KBHR5cGUYAiABKA4yMC5udmlkaWEuaW5mZXJlbmNlc2VydmVyLk1vZGVs",
            "Q29udHJvbFJlcXVlc3QuVHlwZSIcCgRUeXBlEgoKBlVOTE9BRBAAEggKBExP",
            "QUQQASJVChRNb2RlbENvbnRyb2xSZXNwb25zZRI9Cg5yZXF1ZXN0X3N0YXR1",
            "cxgBIAEoCzIlLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuUmVxdWVzdFN0YXR1",
            "cyKABwoaU2hhcmVkTWVtb3J5Q29udHJvbFJlcXVlc3QSTwoIcmVnaXN0ZXIY",
            "ASABKAsyOy5udmlkaWEuaW5mZXJlbmNlc2VydmVyLlNoYXJlZE1lbW9yeUNv",
            "bnRyb2xSZXF1ZXN0LlJlZ2lzdGVySAASUwoKdW5yZWdpc3RlchgCIAEoCzI9",
            "Lm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuU2hhcmVkTWVtb3J5Q29udHJvbFJl",
            "cXVlc3QuVW5yZWdpc3RlckgAEloKDnVucmVnaXN0ZXJfYWxsGAMgASgLMkAu",
            "bnZpZGlhLmluZmVyZW5jZXNlcnZlci5TaGFyZWRNZW1vcnlDb250cm9sUmVx",
            "dWVzdC5VbnJlZ2lzdGVyQWxsSAASSwoGc3RhdHVzGAQgASgLMjkubnZpZGlh",
            "LmluZmVyZW5jZXNlcnZlci5TaGFyZWRNZW1vcnlDb250cm9sUmVxdWVzdC5T",
            "dGF0dXNIABrCAwoIUmVnaXN0ZXISDAoEbmFtZRgBIAEoCRJ4ChRzeXN0ZW1f",
            "c2hhcmVkX21lbW9yeRgCIAEoCzJYLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIu",
            "U2hhcmVkTWVtb3J5Q29udHJvbFJlcXVlc3QuUmVnaXN0ZXIuU3lzdGVtU2hh",
            "cmVkTWVtb3J5SWRlbnRpZmllckgAEnQKEmN1ZGFfc2hhcmVkX21lbW9yeRgD",
            "IAEoCzJWLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuU2hhcmVkTWVtb3J5Q29u",
            "dHJvbFJlcXVlc3QuUmVnaXN0ZXIuQ1VEQVNoYXJlZE1lbW9yeUlkZW50aWZp",
            "ZXJIABIRCglieXRlX3NpemUYBCABKAQaSQocU3lzdGVtU2hhcmVkTWVtb3J5",
            "SWRlbnRpZmllchIZChFzaGFyZWRfbWVtb3J5X2tleRgBIAEoCRIOCgZvZmZz",
            "ZXQYAiABKAQaQwoaQ1VEQVNoYXJlZE1lbW9yeUlkZW50aWZpZXISEgoKcmF3",
            "X2hhbmRsZRgBIAEoDBIRCglkZXZpY2VfaWQYAiABKANCFQoTc2hhcmVkX21l",
            "bW9yeV90eXBlcxoaCgpVbnJlZ2lzdGVyEgwKBG5hbWUYASABKAkaDwoNVW5y",
            "ZWdpc3RlckFsbBoICgZTdGF0dXNCFwoVc2hhcmVkX21lbW9yeV9jb250cm9s",
            "IqUCChtTaGFyZWRNZW1vcnlDb250cm9sUmVzcG9uc2USPQoOcmVxdWVzdF9z",
            "dGF0dXMYASABKAsyJS5udmlkaWEuaW5mZXJlbmNlc2VydmVyLlJlcXVlc3RT",
            "dGF0dXMSWgoUc2hhcmVkX21lbW9yeV9zdGF0dXMYAiABKAsyOi5udmlkaWEu",
            "aW5mZXJlbmNlc2VydmVyLlNoYXJlZE1lbW9yeUNvbnRyb2xSZXNwb25zZS5T",
            "dGF0dXNIABpSCgZTdGF0dXMSSAoUc2hhcmVkX21lbW9yeV9yZWdpb24YASAD",
            "KAsyKi5udmlkaWEuaW5mZXJlbmNlc2VydmVyLlNoYXJlZE1lbW9yeVJlZ2lv",
            "bkIXChVzaGFyZWRfbWVtb3J5X2NvbnRyb2wiiwEKDEluZmVyUmVxdWVzdBIS",
            "Cgptb2RlbF9uYW1lGAEgASgJEhUKDW1vZGVsX3ZlcnNpb24YAiABKAMSPQoJ",
            "bWV0YV9kYXRhGAMgASgLMioubnZpZGlhLmluZmVyZW5jZXNlcnZlci5JbmZl",
            "clJlcXVlc3RIZWFkZXISEQoJcmF3X2lucHV0GAQgAygMIqIBCg1JbmZlclJl",
            "c3BvbnNlEj0KDnJlcXVlc3Rfc3RhdHVzGAEgASgLMiUubnZpZGlhLmluZmVy",
            "ZW5jZXNlcnZlci5SZXF1ZXN0U3RhdHVzEj4KCW1ldGFfZGF0YRgCIAEoCzIr",
            "Lm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuSW5mZXJSZXNwb25zZUhlYWRlchIS",
            "CgpyYXdfb3V0cHV0GAMgAygMIjQKEVJlcG9zaXRvcnlSZXF1ZXN0Eg8KBWlu",
            "ZGV4GAEgASgISABCDgoMcmVxdWVzdF90eXBlIqMBChJSZXBvc2l0b3J5UmVz",
            "cG9uc2USPQoOcmVxdWVzdF9zdGF0dXMYASABKAsyJS5udmlkaWEuaW5mZXJl",
            "bmNlc2VydmVyLlJlcXVlc3RTdGF0dXMSPQoFaW5kZXgYAiABKAsyLC5udmlk",
            "aWEuaW5mZXJlbmNlc2VydmVyLk1vZGVsUmVwb3NpdG9yeUluZGV4SABCDwoN",
            "cmVzcG9uc2VfdHlwZTLUBQoLR1JQQ1NlcnZpY2USWQoGU3RhdHVzEiUubnZp",
            "ZGlhLmluZmVyZW5jZXNlcnZlci5TdGF0dXNSZXF1ZXN0GiYubnZpZGlhLmlu",
            "ZmVyZW5jZXNlcnZlci5TdGF0dXNSZXNwb25zZSIAElkKBkhlYWx0aBIlLm52",
            "aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuSGVhbHRoUmVxdWVzdBomLm52aWRpYS5p",
            "bmZlcmVuY2VzZXJ2ZXIuSGVhbHRoUmVzcG9uc2UiABJWCgVJbmZlchIkLm52",
            "aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuSW5mZXJSZXF1ZXN0GiUubnZpZGlhLmlu",
            "ZmVyZW5jZXNlcnZlci5JbmZlclJlc3BvbnNlIgASYAoLU3RyZWFtSW5mZXIS",
            "JC5udmlkaWEuaW5mZXJlbmNlc2VydmVyLkluZmVyUmVxdWVzdBolLm52aWRp",
            "YS5pbmZlcmVuY2VzZXJ2ZXIuSW5mZXJSZXNwb25zZSIAKAEwARJrCgxNb2Rl",
            "bENvbnRyb2wSKy5udmlkaWEuaW5mZXJlbmNlc2VydmVyLk1vZGVsQ29udHJv",
            "bFJlcXVlc3QaLC5udmlkaWEuaW5mZXJlbmNlc2VydmVyLk1vZGVsQ29udHJv",
            "bFJlc3BvbnNlIgASgAEKE1NoYXJlZE1lbW9yeUNvbnRyb2wSMi5udmlkaWEu",
            "aW5mZXJlbmNlc2VydmVyLlNoYXJlZE1lbW9yeUNvbnRyb2xSZXF1ZXN0GjMu",
            "bnZpZGlhLmluZmVyZW5jZXNlcnZlci5TaGFyZWRNZW1vcnlDb250cm9sUmVz",
            "cG9uc2UiABJlCgpSZXBvc2l0b3J5EikubnZpZGlhLmluZmVyZW5jZXNlcnZl",
            "ci5SZXBvc2l0b3J5UmVxdWVzdBoqLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIu",
            "UmVwb3NpdG9yeVJlc3BvbnNlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Triton.MemoryAnalyzer.Client.ApiReflection.Descriptor, global::Triton.MemoryAnalyzer.Client.RequestStatusReflection.Descriptor, global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.StatusRequest), global::Triton.MemoryAnalyzer.Client.StatusRequest.Parser, new[]{ "ModelName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.StatusResponse), global::Triton.MemoryAnalyzer.Client.StatusResponse.Parser, new[]{ "RequestStatus", "ServerStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.HealthRequest), global::Triton.MemoryAnalyzer.Client.HealthRequest.Parser, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.HealthResponse), global::Triton.MemoryAnalyzer.Client.HealthResponse.Parser, new[]{ "RequestStatus", "Health" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelControlRequest), global::Triton.MemoryAnalyzer.Client.ModelControlRequest.Parser, new[]{ "ModelName", "Type" }, null, new[]{ typeof(global::Triton.MemoryAnalyzer.Client.ModelControlRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelControlResponse), global::Triton.MemoryAnalyzer.Client.ModelControlResponse.Parser, new[]{ "RequestStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Parser, new[]{ "Register", "Unregister", "UnregisterAll", "Status" }, new[]{ "SharedMemoryControl" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Parser, new[]{ "Name", "SystemSharedMemory", "CudaSharedMemory", "ByteSize" }, new[]{ "SharedMemoryTypes" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier.Parser, new[]{ "SharedMemoryKey", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier.Parser, new[]{ "RawHandle", "DeviceId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Parser, new[]{ "RequestStatus", "SharedMemoryStatus" }, new[]{ "SharedMemoryControl" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status.Parser, new[]{ "SharedMemoryRegion" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferRequest), global::Triton.MemoryAnalyzer.Client.InferRequest.Parser, new[]{ "ModelName", "ModelVersion", "MetaData", "RawInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferResponse), global::Triton.MemoryAnalyzer.Client.InferResponse.Parser, new[]{ "RequestStatus", "MetaData", "RawOutput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.RepositoryRequest), global::Triton.MemoryAnalyzer.Client.RepositoryRequest.Parser, new[]{ "Index" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.RepositoryResponse), global::Triton.MemoryAnalyzer.Client.RepositoryResponse.Parser, new[]{ "RequestStatus", "Index" }, new[]{ "ResponseType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///@@
  ///@@.. cpp:var:: message StatusRequest
  ///@@
  ///@@   Request message for Status gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class StatusRequest : pb::IMessage<StatusRequest> {
    private static readonly pb::MessageParser<StatusRequest> _parser = new pb::MessageParser<StatusRequest>(() => new StatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest(StatusRequest other) : this() {
      modelName_ = other.modelName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest Clone() {
      return new StatusRequest(this);
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 1;
    private string modelName_ = "";
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: string model_name
    ///@@
    ///@@     The specific model status to be returned. If empty return status
    ///@@     for all models.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelName != other.ModelName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message StatusResponse
  ///@@
  ///@@   Response message for Status gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class StatusResponse : pb::IMessage<StatusResponse> {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse(StatusResponse other) : this() {
      requestStatus_ = other.requestStatus_ != null ? other.requestStatus_.Clone() : null;
      serverStatus_ = other.serverStatus_ != null ? other.serverStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 1;
    private global::Triton.MemoryAnalyzer.Client.RequestStatus requestStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: RequestStatus request_status
    ///@@
    ///@@     The status of the request, indicating success or failure.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.RequestStatus RequestStatus {
      get { return requestStatus_; }
      set {
        requestStatus_ = value;
      }
    }

    /// <summary>Field number for the "server_status" field.</summary>
    public const int ServerStatusFieldNumber = 2;
    private global::Triton.MemoryAnalyzer.Client.ServerStatus serverStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: ServerStatus server_status
    ///@@
    ///@@     The server and model status.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.ServerStatus ServerStatus {
      get { return serverStatus_; }
      set {
        serverStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      if (!object.Equals(ServerStatus, other.ServerStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestStatus_ != null) hash ^= RequestStatus.GetHashCode();
      if (serverStatus_ != null) hash ^= ServerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestStatus);
      }
      if (serverStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (serverStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.requestStatus_ != null) {
        if (requestStatus_ == null) {
          RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
        }
        RequestStatus.MergeFrom(other.RequestStatus);
      }
      if (other.serverStatus_ != null) {
        if (serverStatus_ == null) {
          ServerStatus = new global::Triton.MemoryAnalyzer.Client.ServerStatus();
        }
        ServerStatus.MergeFrom(other.ServerStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestStatus_ == null) {
              RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
            }
            input.ReadMessage(RequestStatus);
            break;
          }
          case 18: {
            if (serverStatus_ == null) {
              ServerStatus = new global::Triton.MemoryAnalyzer.Client.ServerStatus();
            }
            input.ReadMessage(ServerStatus);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message HealthRequest
  ///@@
  ///@@   Request message for Health gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class HealthRequest : pb::IMessage<HealthRequest> {
    private static readonly pb::MessageParser<HealthRequest> _parser = new pb::MessageParser<HealthRequest>(() => new HealthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest(HealthRequest other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest Clone() {
      return new HealthRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private string mode_ = "";
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: string mode
    ///@@
    ///@@     The requested health action: 'live' requests the liveness
    ///@@     state of the inference server; 'ready' requests the readiness state
    ///@@     of the inference server.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Mode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message HealthResponse
  ///@@
  ///@@   Response message for Health gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class HealthResponse : pb::IMessage<HealthResponse> {
    private static readonly pb::MessageParser<HealthResponse> _parser = new pb::MessageParser<HealthResponse>(() => new HealthResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse(HealthResponse other) : this() {
      requestStatus_ = other.requestStatus_ != null ? other.requestStatus_.Clone() : null;
      health_ = other.health_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse Clone() {
      return new HealthResponse(this);
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 1;
    private global::Triton.MemoryAnalyzer.Client.RequestStatus requestStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: RequestStatus request_status
    ///@@
    ///@@     The status of the request, indicating success or failure.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.RequestStatus RequestStatus {
      get { return requestStatus_; }
      set {
        requestStatus_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private bool health_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: bool health
    ///@@
    ///@@     The result of the request. True indicates the inference server is
    ///@@     live/ready, false indicates the inference server is not live/ready.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      if (Health != other.Health) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestStatus_ != null) hash ^= RequestStatus.GetHashCode();
      if (Health != false) hash ^= Health.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestStatus);
      }
      if (Health != false) {
        output.WriteRawTag(16);
        output.WriteBool(Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (Health != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthResponse other) {
      if (other == null) {
        return;
      }
      if (other.requestStatus_ != null) {
        if (requestStatus_ == null) {
          RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
        }
        RequestStatus.MergeFrom(other.RequestStatus);
      }
      if (other.Health != false) {
        Health = other.Health;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestStatus_ == null) {
              RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
            }
            input.ReadMessage(RequestStatus);
            break;
          }
          case 16: {
            Health = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message ModelControlRequest
  ///@@
  ///@@   Request message for ModelControl gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class ModelControlRequest : pb::IMessage<ModelControlRequest> {
    private static readonly pb::MessageParser<ModelControlRequest> _parser = new pb::MessageParser<ModelControlRequest>(() => new ModelControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelControlRequest(ModelControlRequest other) : this() {
      modelName_ = other.modelName_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelControlRequest Clone() {
      return new ModelControlRequest(this);
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 1;
    private string modelName_ = "";
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: string model_name
    ///@@
    ///@@     The target model name.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Triton.MemoryAnalyzer.Client.ModelControlRequest.Types.Type type_ = 0;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: Type type
    ///@@
    ///@@     The control type that is operated on the specified model.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.ModelControlRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelName != other.ModelName) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelName);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelControlRequest other) {
      if (other == null) {
        return;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelName = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Triton.MemoryAnalyzer.Client.ModelControlRequest.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ModelControlRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///@@  .. cpp:enum:: Type
      ///@@
      ///@@     Types of control operation
      ///@@
      /// </summary>
      public enum Type {
        /// <summary>
        ///@@    .. cpp:enumerator:: Type::UNLOAD = 0
        ///@@
        ///@@       To unload the specified model.
        ///@@
        /// </summary>
        [pbr::OriginalName("UNLOAD")] Unload = 0,
        /// <summary>
        ///@@    .. cpp:enumerator:: Type::LOAD = 1
        ///@@
        ///@@       To load the specified model. If the model has been loaded,
        ///@@       it will be reloaded to fetch the latest change.
        ///@@
        /// </summary>
        [pbr::OriginalName("LOAD")] Load = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message ModelControlResponse
  ///@@
  ///@@   Response message for ModelControl gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class ModelControlResponse : pb::IMessage<ModelControlResponse> {
    private static readonly pb::MessageParser<ModelControlResponse> _parser = new pb::MessageParser<ModelControlResponse>(() => new ModelControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelControlResponse(ModelControlResponse other) : this() {
      requestStatus_ = other.requestStatus_ != null ? other.requestStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelControlResponse Clone() {
      return new ModelControlResponse(this);
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 1;
    private global::Triton.MemoryAnalyzer.Client.RequestStatus requestStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: RequestStatus request_status
    ///@@
    ///@@     The status of the request, indicating success or failure.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.RequestStatus RequestStatus {
      get { return requestStatus_; }
      set {
        requestStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestStatus_ != null) hash ^= RequestStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelControlResponse other) {
      if (other == null) {
        return;
      }
      if (other.requestStatus_ != null) {
        if (requestStatus_ == null) {
          RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
        }
        RequestStatus.MergeFrom(other.RequestStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestStatus_ == null) {
              RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
            }
            input.ReadMessage(RequestStatus);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message SharedMemoryControlRequest
  ///@@
  ///@@   Request message for managing registered shared memory regions in Triton.
  ///@@
  /// </summary>
  public sealed partial class SharedMemoryControlRequest : pb::IMessage<SharedMemoryControlRequest> {
    private static readonly pb::MessageParser<SharedMemoryControlRequest> _parser = new pb::MessageParser<SharedMemoryControlRequest>(() => new SharedMemoryControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedMemoryControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlRequest(SharedMemoryControlRequest other) : this() {
      switch (other.SharedMemoryControlCase) {
        case SharedMemoryControlOneofCase.Register:
          Register = other.Register.Clone();
          break;
        case SharedMemoryControlOneofCase.Unregister:
          Unregister = other.Unregister.Clone();
          break;
        case SharedMemoryControlOneofCase.UnregisterAll:
          UnregisterAll = other.UnregisterAll.Clone();
          break;
        case SharedMemoryControlOneofCase.Status:
          Status = other.Status.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlRequest Clone() {
      return new SharedMemoryControlRequest(this);
    }

    /// <summary>Field number for the "register" field.</summary>
    public const int RegisterFieldNumber = 1;
    /// <summary>
    ///@@    .. cpp:var:: Register register
    ///@@
    ///@@       To register the specified shared memory region.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register Register {
      get { return sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Register ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register) sharedMemoryControl_ : null; }
      set {
        sharedMemoryControl_ = value;
        sharedMemoryControlCase_ = value == null ? SharedMemoryControlOneofCase.None : SharedMemoryControlOneofCase.Register;
      }
    }

    /// <summary>Field number for the "unregister" field.</summary>
    public const int UnregisterFieldNumber = 2;
    /// <summary>
    ///@@    .. cpp:var:: Unregister unregister
    ///@@
    ///@@       To unregister the specified shared memory region.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister Unregister {
      get { return sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Unregister ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister) sharedMemoryControl_ : null; }
      set {
        sharedMemoryControl_ = value;
        sharedMemoryControlCase_ = value == null ? SharedMemoryControlOneofCase.None : SharedMemoryControlOneofCase.Unregister;
      }
    }

    /// <summary>Field number for the "unregister_all" field.</summary>
    public const int UnregisterAllFieldNumber = 3;
    /// <summary>
    ///@@    .. cpp:var:: UnregisterAll unregister_all
    ///@@
    ///@@       To unregister all active shared memory regions.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll UnregisterAll {
      get { return sharedMemoryControlCase_ == SharedMemoryControlOneofCase.UnregisterAll ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll) sharedMemoryControl_ : null; }
      set {
        sharedMemoryControl_ = value;
        sharedMemoryControlCase_ = value == null ? SharedMemoryControlOneofCase.None : SharedMemoryControlOneofCase.UnregisterAll;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    /// <summary>
    ///@@    .. cpp:var:: Status status
    ///@@
    ///@@       Get the status of all active shared memory regions.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status Status {
      get { return sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Status ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status) sharedMemoryControl_ : null; }
      set {
        sharedMemoryControl_ = value;
        sharedMemoryControlCase_ = value == null ? SharedMemoryControlOneofCase.None : SharedMemoryControlOneofCase.Status;
      }
    }

    private object sharedMemoryControl_;
    /// <summary>Enum of possible cases for the "shared_memory_control" oneof.</summary>
    public enum SharedMemoryControlOneofCase {
      None = 0,
      Register = 1,
      Unregister = 2,
      UnregisterAll = 3,
      Status = 4,
    }
    private SharedMemoryControlOneofCase sharedMemoryControlCase_ = SharedMemoryControlOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlOneofCase SharedMemoryControlCase {
      get { return sharedMemoryControlCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSharedMemoryControl() {
      sharedMemoryControlCase_ = SharedMemoryControlOneofCase.None;
      sharedMemoryControl_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedMemoryControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedMemoryControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Register, other.Register)) return false;
      if (!object.Equals(Unregister, other.Unregister)) return false;
      if (!object.Equals(UnregisterAll, other.UnregisterAll)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (SharedMemoryControlCase != other.SharedMemoryControlCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Register) hash ^= Register.GetHashCode();
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Unregister) hash ^= Unregister.GetHashCode();
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.UnregisterAll) hash ^= UnregisterAll.GetHashCode();
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Status) hash ^= Status.GetHashCode();
      hash ^= (int) sharedMemoryControlCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Register) {
        output.WriteRawTag(10);
        output.WriteMessage(Register);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Unregister) {
        output.WriteRawTag(18);
        output.WriteMessage(Unregister);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.UnregisterAll) {
        output.WriteRawTag(26);
        output.WriteMessage(UnregisterAll);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Status) {
        output.WriteRawTag(34);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Register) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Unregister) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unregister);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.UnregisterAll) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnregisterAll);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Status) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedMemoryControlRequest other) {
      if (other == null) {
        return;
      }
      switch (other.SharedMemoryControlCase) {
        case SharedMemoryControlOneofCase.Register:
          if (Register == null) {
            Register = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register();
          }
          Register.MergeFrom(other.Register);
          break;
        case SharedMemoryControlOneofCase.Unregister:
          if (Unregister == null) {
            Unregister = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister();
          }
          Unregister.MergeFrom(other.Unregister);
          break;
        case SharedMemoryControlOneofCase.UnregisterAll:
          if (UnregisterAll == null) {
            UnregisterAll = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll();
          }
          UnregisterAll.MergeFrom(other.UnregisterAll);
          break;
        case SharedMemoryControlOneofCase.Status:
          if (Status == null) {
            Status = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status();
          }
          Status.MergeFrom(other.Status);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register();
            if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Register) {
              subBuilder.MergeFrom(Register);
            }
            input.ReadMessage(subBuilder);
            Register = subBuilder;
            break;
          }
          case 18: {
            global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Unregister();
            if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Unregister) {
              subBuilder.MergeFrom(Unregister);
            }
            input.ReadMessage(subBuilder);
            Unregister = subBuilder;
            break;
          }
          case 26: {
            global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.UnregisterAll();
            if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.UnregisterAll) {
              subBuilder.MergeFrom(UnregisterAll);
            }
            input.ReadMessage(subBuilder);
            UnregisterAll = subBuilder;
            break;
          }
          case 34: {
            global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Status();
            if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SharedMemoryControlRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///@@  .. cpp:var:: message Register
      ///@@
      ///@@     Register a shared memory region.
      ///@@
      /// </summary>
      public sealed partial class Register : pb::IMessage<Register> {
        private static readonly pb::MessageParser<Register> _parser = new pb::MessageParser<Register>(() => new Register());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Register> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Register() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Register(Register other) : this() {
          name_ = other.name_;
          byteSize_ = other.byteSize_;
          switch (other.SharedMemoryTypesCase) {
            case SharedMemoryTypesOneofCase.SystemSharedMemory:
              SystemSharedMemory = other.SystemSharedMemory.Clone();
              break;
            case SharedMemoryTypesOneofCase.CudaSharedMemory:
              CudaSharedMemory = other.CudaSharedMemory.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Register Clone() {
          return new Register(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: string name
        ///@@
        ///@@     The name for this shared memory region.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "system_shared_memory" field.</summary>
        public const int SystemSharedMemoryFieldNumber = 2;
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: SystemSharedMemoryIdentifier system_shared_memory
        ///@@
        ///@@     The identifier for this system shared memory region.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier SystemSharedMemory {
          get { return sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier) sharedMemoryTypes_ : null; }
          set {
            sharedMemoryTypes_ = value;
            sharedMemoryTypesCase_ = value == null ? SharedMemoryTypesOneofCase.None : SharedMemoryTypesOneofCase.SystemSharedMemory;
          }
        }

        /// <summary>Field number for the "cuda_shared_memory" field.</summary>
        public const int CudaSharedMemoryFieldNumber = 3;
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: CUDASharedMemoryIdentifier cuda_shared_memory
        ///@@
        ///@@     The identifier for this CUDA shared memory region.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier CudaSharedMemory {
          get { return sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier) sharedMemoryTypes_ : null; }
          set {
            sharedMemoryTypes_ = value;
            sharedMemoryTypesCase_ = value == null ? SharedMemoryTypesOneofCase.None : SharedMemoryTypesOneofCase.CudaSharedMemory;
          }
        }

        /// <summary>Field number for the "byte_size" field.</summary>
        public const int ByteSizeFieldNumber = 4;
        private ulong byteSize_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 byte_size
        ///@@
        ///@@     Size of the shared memory block, in bytes.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ByteSize {
          get { return byteSize_; }
          set {
            byteSize_ = value;
          }
        }

        private object sharedMemoryTypes_;
        /// <summary>Enum of possible cases for the "shared_memory_types" oneof.</summary>
        public enum SharedMemoryTypesOneofCase {
          None = 0,
          SystemSharedMemory = 2,
          CudaSharedMemory = 3,
        }
        private SharedMemoryTypesOneofCase sharedMemoryTypesCase_ = SharedMemoryTypesOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryTypesOneofCase SharedMemoryTypesCase {
          get { return sharedMemoryTypesCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSharedMemoryTypes() {
          sharedMemoryTypesCase_ = SharedMemoryTypesOneofCase.None;
          sharedMemoryTypes_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Register);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Register other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(SystemSharedMemory, other.SystemSharedMemory)) return false;
          if (!object.Equals(CudaSharedMemory, other.CudaSharedMemory)) return false;
          if (ByteSize != other.ByteSize) return false;
          if (SharedMemoryTypesCase != other.SharedMemoryTypesCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory) hash ^= SystemSharedMemory.GetHashCode();
          if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory) hash ^= CudaSharedMemory.GetHashCode();
          if (ByteSize != 0UL) hash ^= ByteSize.GetHashCode();
          hash ^= (int) sharedMemoryTypesCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory) {
            output.WriteRawTag(18);
            output.WriteMessage(SystemSharedMemory);
          }
          if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory) {
            output.WriteRawTag(26);
            output.WriteMessage(CudaSharedMemory);
          }
          if (ByteSize != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(ByteSize);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemSharedMemory);
          }
          if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CudaSharedMemory);
          }
          if (ByteSize != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ByteSize);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Register other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.ByteSize != 0UL) {
            ByteSize = other.ByteSize;
          }
          switch (other.SharedMemoryTypesCase) {
            case SharedMemoryTypesOneofCase.SystemSharedMemory:
              if (SystemSharedMemory == null) {
                SystemSharedMemory = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier();
              }
              SystemSharedMemory.MergeFrom(other.SystemSharedMemory);
              break;
            case SharedMemoryTypesOneofCase.CudaSharedMemory:
              if (CudaSharedMemory == null) {
                CudaSharedMemory = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier();
              }
              CudaSharedMemory.MergeFrom(other.CudaSharedMemory);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.SystemSharedMemoryIdentifier();
                if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory) {
                  subBuilder.MergeFrom(SystemSharedMemory);
                }
                input.ReadMessage(subBuilder);
                SystemSharedMemory = subBuilder;
                break;
              }
              case 26: {
                global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Types.CUDASharedMemoryIdentifier();
                if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory) {
                  subBuilder.MergeFrom(CudaSharedMemory);
                }
                input.ReadMessage(subBuilder);
                CudaSharedMemory = subBuilder;
                break;
              }
              case 32: {
                ByteSize = input.ReadUInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Register message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///@@
          ///@@  .. cpp:var:: message SystemSharedMemoryIdentifier
          ///@@
          ///@@     The identifier for this system shared memory region.
          ///@@
          /// </summary>
          public sealed partial class SystemSharedMemoryIdentifier : pb::IMessage<SystemSharedMemoryIdentifier> {
            private static readonly pb::MessageParser<SystemSharedMemoryIdentifier> _parser = new pb::MessageParser<SystemSharedMemoryIdentifier>(() => new SystemSharedMemoryIdentifier());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SystemSharedMemoryIdentifier> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SystemSharedMemoryIdentifier() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SystemSharedMemoryIdentifier(SystemSharedMemoryIdentifier other) : this() {
              sharedMemoryKey_ = other.sharedMemoryKey_;
              offset_ = other.offset_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SystemSharedMemoryIdentifier Clone() {
              return new SystemSharedMemoryIdentifier(this);
            }

            /// <summary>Field number for the "shared_memory_key" field.</summary>
            public const int SharedMemoryKeyFieldNumber = 1;
            private string sharedMemoryKey_ = "";
            /// <summary>
            ///@@  .. cpp:var:: string shared_memory_key
            ///@@
            ///@@     The name of the shared memory region that holds the input data
            ///@@     (or where the output data should be written).
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SharedMemoryKey {
              get { return sharedMemoryKey_; }
              set {
                sharedMemoryKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "offset" field.</summary>
            public const int OffsetFieldNumber = 2;
            private ulong offset_;
            /// <summary>
            ///@@  .. cpp:var:: uint64 offset
            ///@@
            ///@@     This is the offset of the shared memory block from the start
            ///@@     of the shared memory region.
            ///@@     start = offset, end = offset + byte_size;
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Offset {
              get { return offset_; }
              set {
                offset_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SystemSharedMemoryIdentifier);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SystemSharedMemoryIdentifier other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SharedMemoryKey != other.SharedMemoryKey) return false;
              if (Offset != other.Offset) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SharedMemoryKey.Length != 0) hash ^= SharedMemoryKey.GetHashCode();
              if (Offset != 0UL) hash ^= Offset.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SharedMemoryKey.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(SharedMemoryKey);
              }
              if (Offset != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(Offset);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SharedMemoryKey.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SharedMemoryKey);
              }
              if (Offset != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SystemSharedMemoryIdentifier other) {
              if (other == null) {
                return;
              }
              if (other.SharedMemoryKey.Length != 0) {
                SharedMemoryKey = other.SharedMemoryKey;
              }
              if (other.Offset != 0UL) {
                Offset = other.Offset;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    SharedMemoryKey = input.ReadString();
                    break;
                  }
                  case 16: {
                    Offset = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///@@
          ///@@  .. cpp:var:: message CUDASharedMemoryIdentifier
          ///@@
          ///@@     The identifier for this system shared memory region.
          ///@@
          /// </summary>
          public sealed partial class CUDASharedMemoryIdentifier : pb::IMessage<CUDASharedMemoryIdentifier> {
            private static readonly pb::MessageParser<CUDASharedMemoryIdentifier> _parser = new pb::MessageParser<CUDASharedMemoryIdentifier>(() => new CUDASharedMemoryIdentifier());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CUDASharedMemoryIdentifier> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Types.Register.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CUDASharedMemoryIdentifier() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CUDASharedMemoryIdentifier(CUDASharedMemoryIdentifier other) : this() {
              rawHandle_ = other.rawHandle_;
              deviceId_ = other.deviceId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CUDASharedMemoryIdentifier Clone() {
              return new CUDASharedMemoryIdentifier(this);
            }

            /// <summary>Field number for the "raw_handle" field.</summary>
            public const int RawHandleFieldNumber = 1;
            private pb::ByteString rawHandle_ = pb::ByteString.Empty;
            /// <summary>
            ///@@  .. cpp:var:: bytes raw_handle
            ///@@
            ///@@     The raw serialized cudaIPC handle.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString RawHandle {
              get { return rawHandle_; }
              set {
                rawHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "device_id" field.</summary>
            public const int DeviceIdFieldNumber = 2;
            private long deviceId_;
            /// <summary>
            ///@@  .. cpp:var:: int64 device_id
            ///@@
            ///@@     The GPU device ID on which the cudaIPC handle was created.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long DeviceId {
              get { return deviceId_; }
              set {
                deviceId_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CUDASharedMemoryIdentifier);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CUDASharedMemoryIdentifier other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (RawHandle != other.RawHandle) return false;
              if (DeviceId != other.DeviceId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (RawHandle.Length != 0) hash ^= RawHandle.GetHashCode();
              if (DeviceId != 0L) hash ^= DeviceId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (RawHandle.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(RawHandle);
              }
              if (DeviceId != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(DeviceId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (RawHandle.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(RawHandle);
              }
              if (DeviceId != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeviceId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CUDASharedMemoryIdentifier other) {
              if (other == null) {
                return;
              }
              if (other.RawHandle.Length != 0) {
                RawHandle = other.RawHandle;
              }
              if (other.DeviceId != 0L) {
                DeviceId = other.DeviceId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    RawHandle = input.ReadBytes();
                    break;
                  }
                  case 16: {
                    DeviceId = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///@@  .. cpp:var:: message Unregister
      ///@@
      ///@@     Unregister a specified shared memory region.
      ///@@
      /// </summary>
      public sealed partial class Unregister : pb::IMessage<Unregister> {
        private static readonly pb::MessageParser<Unregister> _parser = new pb::MessageParser<Unregister>(() => new Unregister());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Unregister> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unregister() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unregister(Unregister other) : this() {
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unregister Clone() {
          return new Unregister(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: string name
        ///@@
        ///@@     The name for this shared memory region to unregister.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Unregister);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Unregister other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Unregister other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///@@  .. cpp:var:: message UnregisterAll
      ///@@
      ///@@     Unregister all shared memory regions.
      ///@@
      /// </summary>
      public sealed partial class UnregisterAll : pb::IMessage<UnregisterAll> {
        private static readonly pb::MessageParser<UnregisterAll> _parser = new pb::MessageParser<UnregisterAll>(() => new UnregisterAll());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnregisterAll> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnregisterAll() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnregisterAll(UnregisterAll other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnregisterAll Clone() {
          return new UnregisterAll(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UnregisterAll);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnregisterAll other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnregisterAll other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      /// <summary>
      ///@@  .. cpp:var:: message GetStatus
      ///@@
      ///@@     Get the status of all active shared memory regions.
      ///@@
      /// </summary>
      public sealed partial class Status : pb::IMessage<Status> {
        private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Status> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status(Status other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status Clone() {
          return new Status(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Status);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Status other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Status other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message SharedMemoryControlResponse
  ///@@
  ///@@   Response message for SharedMemoryControl gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class SharedMemoryControlResponse : pb::IMessage<SharedMemoryControlResponse> {
    private static readonly pb::MessageParser<SharedMemoryControlResponse> _parser = new pb::MessageParser<SharedMemoryControlResponse>(() => new SharedMemoryControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedMemoryControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlResponse(SharedMemoryControlResponse other) : this() {
      requestStatus_ = other.requestStatus_ != null ? other.requestStatus_.Clone() : null;
      switch (other.SharedMemoryControlCase) {
        case SharedMemoryControlOneofCase.SharedMemoryStatus:
          SharedMemoryStatus = other.SharedMemoryStatus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlResponse Clone() {
      return new SharedMemoryControlResponse(this);
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 1;
    private global::Triton.MemoryAnalyzer.Client.RequestStatus requestStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: RequestStatus request_status
    ///@@
    ///@@     The status of the request, indicating success or failure.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.RequestStatus RequestStatus {
      get { return requestStatus_; }
      set {
        requestStatus_ = value;
      }
    }

    /// <summary>Field number for the "shared_memory_status" field.</summary>
    public const int SharedMemoryStatusFieldNumber = 2;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: Status shared_memory_status
    ///@@
    ///@@     The status of all active shared memory regions.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status SharedMemoryStatus {
      get { return sharedMemoryControlCase_ == SharedMemoryControlOneofCase.SharedMemoryStatus ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status) sharedMemoryControl_ : null; }
      set {
        sharedMemoryControl_ = value;
        sharedMemoryControlCase_ = value == null ? SharedMemoryControlOneofCase.None : SharedMemoryControlOneofCase.SharedMemoryStatus;
      }
    }

    private object sharedMemoryControl_;
    /// <summary>Enum of possible cases for the "shared_memory_control" oneof.</summary>
    public enum SharedMemoryControlOneofCase {
      None = 0,
      SharedMemoryStatus = 2,
    }
    private SharedMemoryControlOneofCase sharedMemoryControlCase_ = SharedMemoryControlOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedMemoryControlOneofCase SharedMemoryControlCase {
      get { return sharedMemoryControlCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSharedMemoryControl() {
      sharedMemoryControlCase_ = SharedMemoryControlOneofCase.None;
      sharedMemoryControl_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedMemoryControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedMemoryControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      if (!object.Equals(SharedMemoryStatus, other.SharedMemoryStatus)) return false;
      if (SharedMemoryControlCase != other.SharedMemoryControlCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestStatus_ != null) hash ^= RequestStatus.GetHashCode();
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.SharedMemoryStatus) hash ^= SharedMemoryStatus.GetHashCode();
      hash ^= (int) sharedMemoryControlCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestStatus);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.SharedMemoryStatus) {
        output.WriteRawTag(18);
        output.WriteMessage(SharedMemoryStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.SharedMemoryStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SharedMemoryStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedMemoryControlResponse other) {
      if (other == null) {
        return;
      }
      if (other.requestStatus_ != null) {
        if (requestStatus_ == null) {
          RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
        }
        RequestStatus.MergeFrom(other.RequestStatus);
      }
      switch (other.SharedMemoryControlCase) {
        case SharedMemoryControlOneofCase.SharedMemoryStatus:
          if (SharedMemoryStatus == null) {
            SharedMemoryStatus = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status();
          }
          SharedMemoryStatus.MergeFrom(other.SharedMemoryStatus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestStatus_ == null) {
              RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
            }
            input.ReadMessage(RequestStatus);
            break;
          }
          case 18: {
            global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Types.Status();
            if (sharedMemoryControlCase_ == SharedMemoryControlOneofCase.SharedMemoryStatus) {
              subBuilder.MergeFrom(SharedMemoryStatus);
            }
            input.ReadMessage(subBuilder);
            SharedMemoryStatus = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SharedMemoryControlResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///@@
      ///@@.. cpp:var:: message Status
      ///@@
      ///@@   Status of all active shared memory regions.
      ///@@
      /// </summary>
      public sealed partial class Status : pb::IMessage<Status> {
        private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Status> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status(Status other) : this() {
          sharedMemoryRegion_ = other.sharedMemoryRegion_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status Clone() {
          return new Status(this);
        }

        /// <summary>Field number for the "shared_memory_region" field.</summary>
        public const int SharedMemoryRegionFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion> _repeated_sharedMemoryRegion_codec
            = pb::FieldCodec.ForMessage(10, global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Parser);
        private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion> sharedMemoryRegion_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion>();
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: SharedMemoryRegion shared_memory_region
        ///@@
        ///@@     The list of active/registered shared memory regions.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion> SharedMemoryRegion {
          get { return sharedMemoryRegion_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Status);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Status other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sharedMemoryRegion_.Equals(other.sharedMemoryRegion_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sharedMemoryRegion_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sharedMemoryRegion_.WriteTo(output, _repeated_sharedMemoryRegion_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sharedMemoryRegion_.CalculateSize(_repeated_sharedMemoryRegion_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Status other) {
          if (other == null) {
            return;
          }
          sharedMemoryRegion_.Add(other.sharedMemoryRegion_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                sharedMemoryRegion_.AddEntriesFrom(input, _repeated_sharedMemoryRegion_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message InferRequest
  ///@@
  ///@@   Request message for Infer gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class InferRequest : pb::IMessage<InferRequest> {
    private static readonly pb::MessageParser<InferRequest> _parser = new pb::MessageParser<InferRequest>(() => new InferRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InferRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferRequest(InferRequest other) : this() {
      modelName_ = other.modelName_;
      modelVersion_ = other.modelVersion_;
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      rawInput_ = other.rawInput_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferRequest Clone() {
      return new InferRequest(this);
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 1;
    private string modelName_ = "";
    /// <summary>
    ///@@  .. cpp:var:: string model_name
    ///@@
    ///@@     The name of the model to use for inferencing.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_version" field.</summary>
    public const int ModelVersionFieldNumber = 2;
    private long modelVersion_;
    /// <summary>
    ///@@  .. cpp:var:: int64 version
    ///@@
    ///@@     The version of the model to use for inference. If -1
    ///@@     the latest/most-recent version of the model is used.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ModelVersion {
      get { return modelVersion_; }
      set {
        modelVersion_ = value;
      }
    }

    /// <summary>Field number for the "meta_data" field.</summary>
    public const int MetaDataFieldNumber = 3;
    private global::Triton.MemoryAnalyzer.Client.InferRequestHeader metaData_;
    /// <summary>
    ///@@  .. cpp:var:: InferRequestHeader meta_data
    ///@@
    ///@@     Meta-data for the request: input tensors, output
    ///@@     tensors, etc.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.InferRequestHeader MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    /// <summary>Field number for the "raw_input" field.</summary>
    public const int RawInputFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_rawInput_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> rawInput_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///@@  .. cpp:var:: bytes raw_input (repeated)
    ///@@
    ///@@     The raw input tensor data in the order specified in 'meta_data'.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RawInput {
      get { return rawInput_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InferRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InferRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelName != other.ModelName) return false;
      if (ModelVersion != other.ModelVersion) return false;
      if (!object.Equals(MetaData, other.MetaData)) return false;
      if(!rawInput_.Equals(other.rawInput_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ModelVersion != 0L) hash ^= ModelVersion.GetHashCode();
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      hash ^= rawInput_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelName);
      }
      if (ModelVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ModelVersion);
      }
      if (metaData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MetaData);
      }
      rawInput_.WriteTo(output, _repeated_rawInput_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ModelVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ModelVersion);
      }
      if (metaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      size += rawInput_.CalculateSize(_repeated_rawInput_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InferRequest other) {
      if (other == null) {
        return;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ModelVersion != 0L) {
        ModelVersion = other.ModelVersion;
      }
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::Triton.MemoryAnalyzer.Client.InferRequestHeader();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      rawInput_.Add(other.rawInput_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelName = input.ReadString();
            break;
          }
          case 16: {
            ModelVersion = input.ReadInt64();
            break;
          }
          case 26: {
            if (metaData_ == null) {
              MetaData = new global::Triton.MemoryAnalyzer.Client.InferRequestHeader();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 34: {
            rawInput_.AddEntriesFrom(input, _repeated_rawInput_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message InferResponse
  ///@@
  ///@@   Response message for Infer gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class InferResponse : pb::IMessage<InferResponse> {
    private static readonly pb::MessageParser<InferResponse> _parser = new pb::MessageParser<InferResponse>(() => new InferResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InferResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferResponse(InferResponse other) : this() {
      requestStatus_ = other.requestStatus_ != null ? other.requestStatus_.Clone() : null;
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      rawOutput_ = other.rawOutput_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferResponse Clone() {
      return new InferResponse(this);
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 1;
    private global::Triton.MemoryAnalyzer.Client.RequestStatus requestStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: RequestStatus request_status
    ///@@
    ///@@     The status of the request, indicating success or failure.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.RequestStatus RequestStatus {
      get { return requestStatus_; }
      set {
        requestStatus_ = value;
      }
    }

    /// <summary>Field number for the "meta_data" field.</summary>
    public const int MetaDataFieldNumber = 2;
    private global::Triton.MemoryAnalyzer.Client.InferResponseHeader metaData_;
    /// <summary>
    ///@@  .. cpp:var:: InferResponseHeader meta_data
    ///@@
    ///@@     The response meta-data for the output tensors.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.InferResponseHeader MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    /// <summary>Field number for the "raw_output" field.</summary>
    public const int RawOutputFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_rawOutput_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> rawOutput_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///@@  .. cpp:var:: bytes raw_output (repeated)
    ///@@
    ///@@     The raw output tensor data in the order specified in 'meta_data'.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RawOutput {
      get { return rawOutput_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InferResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InferResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      if (!object.Equals(MetaData, other.MetaData)) return false;
      if(!rawOutput_.Equals(other.rawOutput_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestStatus_ != null) hash ^= RequestStatus.GetHashCode();
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      hash ^= rawOutput_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestStatus);
      }
      if (metaData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MetaData);
      }
      rawOutput_.WriteTo(output, _repeated_rawOutput_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (metaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      size += rawOutput_.CalculateSize(_repeated_rawOutput_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InferResponse other) {
      if (other == null) {
        return;
      }
      if (other.requestStatus_ != null) {
        if (requestStatus_ == null) {
          RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
        }
        RequestStatus.MergeFrom(other.RequestStatus);
      }
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::Triton.MemoryAnalyzer.Client.InferResponseHeader();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      rawOutput_.Add(other.rawOutput_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestStatus_ == null) {
              RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
            }
            input.ReadMessage(RequestStatus);
            break;
          }
          case 18: {
            if (metaData_ == null) {
              MetaData = new global::Triton.MemoryAnalyzer.Client.InferResponseHeader();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 26: {
            rawOutput_.AddEntriesFrom(input, _repeated_rawOutput_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message RepositoryRequest
  ///@@
  ///@@   Request message for Repository gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class RepositoryRequest : pb::IMessage<RepositoryRequest> {
    private static readonly pb::MessageParser<RepositoryRequest> _parser = new pb::MessageParser<RepositoryRequest>(() => new RepositoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepositoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositoryRequest(RepositoryRequest other) : this() {
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Index:
          Index = other.Index;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositoryRequest Clone() {
      return new RepositoryRequest(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    /// <summary>
    ///@@
    ///@@    .. cpp:var:: bool index
    ///@@
    ///@@       Request for the index of the model repository.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Index {
      get { return requestTypeCase_ == RequestTypeOneofCase.Index ? (bool) requestType_ : false; }
      set {
        requestType_ = value;
        requestTypeCase_ = RequestTypeOneofCase.Index;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "request_type" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Index = 1,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepositoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepositoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestTypeCase_ == RequestTypeOneofCase.Index) hash ^= Index.GetHashCode();
      hash ^= (int) requestTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestTypeCase_ == RequestTypeOneofCase.Index) {
        output.WriteRawTag(8);
        output.WriteBool(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestTypeCase_ == RequestTypeOneofCase.Index) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepositoryRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Index:
          Index = other.Index;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message RepositoryResponse
  ///@@
  ///@@   Response message for Repository gRPC endpoint.
  ///@@
  /// </summary>
  public sealed partial class RepositoryResponse : pb::IMessage<RepositoryResponse> {
    private static readonly pb::MessageParser<RepositoryResponse> _parser = new pb::MessageParser<RepositoryResponse>(() => new RepositoryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepositoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositoryResponse(RepositoryResponse other) : this() {
      requestStatus_ = other.requestStatus_ != null ? other.requestStatus_.Clone() : null;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Index:
          Index = other.Index.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositoryResponse Clone() {
      return new RepositoryResponse(this);
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 1;
    private global::Triton.MemoryAnalyzer.Client.RequestStatus requestStatus_;
    /// <summary>
    ///@@
    ///@@  .. cpp:var:: RequestStatus request_status
    ///@@
    ///@@     The status of the request, indicating success or failure.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.RequestStatus RequestStatus {
      get { return requestStatus_; }
      set {
        requestStatus_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    /// <summary>
    ///@@
    ///@@    .. cpp:var:: bool index
    ///@@
    ///@@       The index of the model repository.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex Index {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Index ? (global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Index;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "response_type" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Index = 2,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepositoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepositoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestStatus_ != null) hash ^= RequestStatus.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Index) hash ^= Index.GetHashCode();
      hash ^= (int) responseTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestStatus);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Index) {
        output.WriteRawTag(18);
        output.WriteMessage(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Index) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepositoryResponse other) {
      if (other == null) {
        return;
      }
      if (other.requestStatus_ != null) {
        if (requestStatus_ == null) {
          RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
        }
        RequestStatus.MergeFrom(other.RequestStatus);
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Index:
          if (Index == null) {
            Index = new global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex();
          }
          Index.MergeFrom(other.Index);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestStatus_ == null) {
              RequestStatus = new global::Triton.MemoryAnalyzer.Client.RequestStatus();
            }
            input.ReadMessage(RequestStatus);
            break;
          }
          case 18: {
            global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex subBuilder = new global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex();
            if (responseTypeCase_ == ResponseTypeOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
