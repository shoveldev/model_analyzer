// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace Triton.MemoryAnalyzer.Client
{

    /// <summary>Holder for reflection information generated from api.proto</summary>
    public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SFm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIiRAoRSW5mZXJT",
            "aGFyZWRNZW1vcnkSDAoEbmFtZRgBIAEoCRIOCgZvZmZzZXQYAiABKAQSEQoJ",
            "Ynl0ZV9zaXplGAMgASgEIt8EChJJbmZlclJlcXVlc3RIZWFkZXISCgoCaWQY",
            "BSABKAQSDQoFZmxhZ3MYBiABKA0SFgoOY29ycmVsYXRpb25faWQYBCABKAQS",
            "EgoKYmF0Y2hfc2l6ZRgBIAEoDRI/CgVpbnB1dBgCIAMoCzIwLm52aWRpYS5p",
            "bmZlcmVuY2VzZXJ2ZXIuSW5mZXJSZXF1ZXN0SGVhZGVyLklucHV0EkEKBm91",
            "dHB1dBgDIAMoCzIxLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuSW5mZXJSZXF1",
            "ZXN0SGVhZGVyLk91dHB1dBp+CgVJbnB1dBIMCgRuYW1lGAEgASgJEgwKBGRp",
            "bXMYAiADKAMSFwoPYmF0Y2hfYnl0ZV9zaXplGAMgASgEEkAKDXNoYXJlZF9t",
            "ZW1vcnkYBCABKAsyKS5udmlkaWEuaW5mZXJlbmNlc2VydmVyLkluZmVyU2hh",
            "cmVkTWVtb3J5GrYBCgZPdXRwdXQSDAoEbmFtZRgBIAEoCRJECgNjbHMYAyAB",
            "KAsyNy5udmlkaWEuaW5mZXJlbmNlc2VydmVyLkluZmVyUmVxdWVzdEhlYWRl",
            "ci5PdXRwdXQuQ2xhc3MSQAoNc2hhcmVkX21lbW9yeRgEIAEoCzIpLm52aWRp",
            "YS5pbmZlcmVuY2VzZXJ2ZXIuSW5mZXJTaGFyZWRNZW1vcnkaFgoFQ2xhc3MS",
            "DQoFY291bnQYASABKA0iRQoERmxhZxINCglGTEFHX05PTkUQABIXChNGTEFH",
            "X1NFUVVFTkNFX1NUQVJUEAESFQoRRkxBR19TRVFVRU5DRV9FTkQQAiKJBAoT",
            "SW5mZXJSZXNwb25zZUhlYWRlchIKCgJpZBgFIAEoBBISCgptb2RlbF9uYW1l",
            "GAEgASgJEhUKDW1vZGVsX3ZlcnNpb24YAiABKAMSEgoKYmF0Y2hfc2l6ZRgD",
            "IAEoDRJCCgZvdXRwdXQYBCADKAsyMi5udmlkaWEuaW5mZXJlbmNlc2VydmVy",
            "LkluZmVyUmVzcG9uc2VIZWFkZXIuT3V0cHV0GuICCgZPdXRwdXQSDAoEbmFt",
            "ZRgBIAEoCRJDCgNyYXcYAiABKAsyNi5udmlkaWEuaW5mZXJlbmNlc2VydmVy",
            "LkluZmVyUmVzcG9uc2VIZWFkZXIuT3V0cHV0LlJhdxJRCg1iYXRjaF9jbGFz",
            "c2VzGAMgAygLMjoubnZpZGlhLmluZmVyZW5jZXNlcnZlci5JbmZlclJlc3Bv",
            "bnNlSGVhZGVyLk91dHB1dC5DbGFzc2VzGiwKA1JhdxIMCgRkaW1zGAEgAygD",
            "EhcKD2JhdGNoX2J5dGVfc2l6ZRgCIAEoBBoyCgVDbGFzcxILCgNpZHgYASAB",
            "KAUSDQoFdmFsdWUYAiABKAISDQoFbGFiZWwYAyABKAkaUAoHQ2xhc3NlcxJF",
            "CgNjbHMYASADKAsyOC5udmlkaWEuaW5mZXJlbmNlc2VydmVyLkluZmVyUmVz",
            "cG9uc2VIZWFkZXIuT3V0cHV0LkNsYXNzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferSharedMemory), global::Triton.MemoryAnalyzer.Client.InferSharedMemory.Parser, new[]{ "Name", "Offset", "ByteSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferRequestHeader), global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Parser, new[]{ "Id", "Flags", "CorrelationId", "BatchSize", "Input", "Output" }, null, new[]{ typeof(global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Flag) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input), global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input.Parser, new[]{ "Name", "Dims", "BatchByteSize", "SharedMemory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output), global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Parser, new[]{ "Name", "Cls", "SharedMemory" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Types.Class), global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Types.Class.Parser, new[]{ "Count" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferResponseHeader), global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Parser, new[]{ "Id", "ModelName", "ModelVersion", "BatchSize", "Output" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output), global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Parser, new[]{ "Name", "Raw", "BatchClasses" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Raw), global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Raw.Parser, new[]{ "Dims", "BatchByteSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class), global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class.Parser, new[]{ "Idx", "Value", "Label" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes), global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes.Parser, new[]{ "Cls" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///@@.. cpp:var:: message InferSharedMemory
  ///@@
  ///@@   The meta-data for the shared memory from which to read the input
  ///@@   data and/or write the output data.
  ///@@
  /// </summary>
  public sealed partial class InferSharedMemory : pb::IMessage<InferSharedMemory> {
    private static readonly pb::MessageParser<InferSharedMemory> _parser = new pb::MessageParser<InferSharedMemory>(() => new InferSharedMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InferSharedMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferSharedMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferSharedMemory(InferSharedMemory other) : this() {
      name_ = other.name_;
      offset_ = other.offset_;
      byteSize_ = other.byteSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferSharedMemory Clone() {
      return new InferSharedMemory(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///@@  .. cpp:var:: string name
    ///@@
    ///@@     The name given during registration of a shared memory region that
    ///@@     holds the input data (or where the output data should be written).
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private ulong offset_;
    /// <summary>
    ///@@  .. cpp:var:: uint64 offset
    ///@@
    ///@@     The offset from the start of the shared memory region.
    ///@@     start = offset, end = offset + size;
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "byte_size" field.</summary>
    public const int ByteSizeFieldNumber = 3;
    private ulong byteSize_;
    /// <summary>
    ///@@  .. cpp:var:: uint64 byte_size
    ///@@
    ///@@     Size of the memory block, in bytes.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ByteSize {
      get { return byteSize_; }
      set {
        byteSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InferSharedMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InferSharedMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Offset != other.Offset) return false;
      if (ByteSize != other.ByteSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      if (ByteSize != 0UL) hash ^= ByteSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (ByteSize != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ByteSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (ByteSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ByteSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InferSharedMemory other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      if (other.ByteSize != 0UL) {
        ByteSize = other.ByteSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Offset = input.ReadUInt64();
            break;
          }
          case 24: {
            ByteSize = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message InferRequestHeader
  ///@@
  ///@@   Meta-data for an inferencing request. The actual input data is
  ///@@   delivered separate from this header, in the HTTP body for an HTTP
  ///@@   request, or in the :cpp:var:`InferRequest` message for a gRPC request.
  ///@@
  /// </summary>
  public sealed partial class InferRequestHeader : pb::IMessage<InferRequestHeader> {
    private static readonly pb::MessageParser<InferRequestHeader> _parser = new pb::MessageParser<InferRequestHeader>(() => new InferRequestHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InferRequestHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferRequestHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferRequestHeader(InferRequestHeader other) : this() {
      id_ = other.id_;
      flags_ = other.flags_;
      correlationId_ = other.correlationId_;
      batchSize_ = other.batchSize_;
      input_ = other.input_.Clone();
      output_ = other.output_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferRequestHeader Clone() {
      return new InferRequestHeader(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private ulong id_;
    /// <summary>
    ///@@  .. cpp:var:: uint64 id
    ///@@
    ///@@     The ID of the inference request. The response of the request will
    ///@@     have the same ID in InferResponseHeader. The request sender can use
    ///@@     the ID to correlate the response to corresponding request if needed.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 6;
    private uint flags_;
    /// <summary>
    ///@@  .. cpp:var:: uint32 flags
    ///@@
    ///@@     The flags associated with this request. This field holds a bitwise-or
    ///@@     of all flag values.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 4;
    private ulong correlationId_;
    /// <summary>
    ///@@  .. cpp:var:: uint64 correlation_id
    ///@@
    ///@@     The correlation ID of the inference request. Default is 0, which
    ///@@     indictes that the request has no correlation ID. The correlation ID
    ///@@     is used to indicate two or more inference request are related to
    ///@@     each other. How this relationship is handled by the inference
    ///@@     server is determined by the model's scheduling policy.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 1;
    private uint batchSize_;
    /// <summary>
    ///@@  .. cpp:var:: uint32 batch_size
    ///@@
    ///@@     The batch size of the inference request. This must be >= 1. For
    ///@@     models that don't support batching, batch_size must be 1.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input> _repeated_input_codec
        = pb::FieldCodec.ForMessage(18, global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input> input_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input>();
    /// <summary>
    ///@@  .. cpp:var:: Input input (repeated)
    ///@@
    ///@@     The input meta-data for the inputs provided with the the inference
    ///@@     request.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Input> Input {
      get { return input_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output> _repeated_output_codec
        = pb::FieldCodec.ForMessage(26, global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Parser);
    private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output> output_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output>();
    /// <summary>
    ///@@  .. cpp:var:: Output output (repeated)
    ///@@
    ///@@     The output meta-data for the inputs provided with the the inference
    ///@@     request.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output> Output {
      get { return output_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InferRequestHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InferRequestHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Flags != other.Flags) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (BatchSize != other.BatchSize) return false;
      if(!input_.Equals(other.input_)) return false;
      if(!output_.Equals(other.output_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (CorrelationId != 0UL) hash ^= CorrelationId.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      hash ^= input_.GetHashCode();
      hash ^= output_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatchSize);
      }
      input_.WriteTo(output, _repeated_input_codec);
      output_.WriteTo(output, _repeated_output_codec);
      if (CorrelationId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CorrelationId);
      }
      if (Id != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Id);
      }
      if (Flags != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (CorrelationId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CorrelationId);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      size += input_.CalculateSize(_repeated_input_codec);
      size += output_.CalculateSize(_repeated_output_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InferRequestHeader other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.CorrelationId != 0UL) {
        CorrelationId = other.CorrelationId;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      input_.Add(other.input_);
      output_.Add(other.output_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 18: {
            input_.AddEntriesFrom(input, _repeated_input_codec);
            break;
          }
          case 26: {
            output_.AddEntriesFrom(input, _repeated_output_codec);
            break;
          }
          case 32: {
            CorrelationId = input.ReadUInt64();
            break;
          }
          case 40: {
            Id = input.ReadUInt64();
            break;
          }
          case 48: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InferRequestHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///@@  .. cpp:enum:: Flag
      ///@@
      ///@@     Flags that can be associated with an inference request.
      ///@@     All flags are packed bitwise into the 'flags' field and
      ///@@     so the value of each must be a power-of-2.
      ///@@
      /// </summary>
      public enum Flag {
        /// <summary>
        ///@@    .. cpp:enumerator:: Flag::FLAG_NONE = 0
        ///@@
        ///@@       Value indicating no flags are enabled.
        ///@@
        /// </summary>
        [pbr::OriginalName("FLAG_NONE")] None = 0,
        /// <summary>
        ///@@    .. cpp:enumerator:: Flag::FLAG_SEQUENCE_START = 1 &lt;&lt; 0
        ///@@
        ///@@       This request is the start of a related sequence of requests.
        ///@@
        /// </summary>
        [pbr::OriginalName("FLAG_SEQUENCE_START")] SequenceStart = 1,
        /// <summary>
        ///@@    .. cpp:enumerator:: Flag::FLAG_SEQUENCE_END = 1 &lt;&lt; 1
        ///@@
        ///@@       This request is the end of a related sequence of requests.
        ///@@
        /// </summary>
        [pbr::OriginalName("FLAG_SEQUENCE_END")] SequenceEnd = 2,
      }

      /// <summary>
      ///@@  .. cpp:var:: message Input
      ///@@
      ///@@     Meta-data for an input tensor provided as part of an inferencing
      ///@@     request.
      ///@@
      /// </summary>
      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input(Input other) : this() {
          name_ = other.name_;
          dims_ = other.dims_.Clone();
          batchByteSize_ = other.batchByteSize_;
          sharedMemory_ = other.sharedMemory_ != null ? other.sharedMemory_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input Clone() {
          return new Input(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///@@    .. cpp:var:: string name
        ///@@
        ///@@       The name of the input tensor.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "dims" field.</summary>
        public const int DimsFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_dims_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> dims_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///@@    .. cpp:var:: int64 dims (repeated)
        ///@@
        ///@@       The shape of the input tensor, not including the batch dimension.
        ///@@       Optional if the model configuration for this input explicitly
        ///@@       specifies all dimensions of the shape. Required if the model
        ///@@       configuration for this input has any wildcard dimensions (-1).
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Dims {
          get { return dims_; }
        }

        /// <summary>Field number for the "batch_byte_size" field.</summary>
        public const int BatchByteSizeFieldNumber = 3;
        private ulong batchByteSize_;
        /// <summary>
        ///@@    .. cpp:var:: uint64 batch_byte_size
        ///@@
        ///@@       The size of the full batch of the input tensor, in bytes.
        ///@@       Optional for tensors with fixed-sized datatypes. Required
        ///@@       for tensors with a non-fixed-size datatype (like STRING).
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong BatchByteSize {
          get { return batchByteSize_; }
          set {
            batchByteSize_ = value;
          }
        }

        /// <summary>Field number for the "shared_memory" field.</summary>
        public const int SharedMemoryFieldNumber = 4;
        private global::Triton.MemoryAnalyzer.Client.InferSharedMemory sharedMemory_;
        /// <summary>
        ///@@    .. cpp:var:: InferSharedMemory shared_memory
        ///@@
        ///@@       It is the location in shared memory that contains the tensor data
        ///@@       for this input. Using shared memory is optional but if this
        ///@@       message is used, all fields are required.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.InferSharedMemory SharedMemory {
          get { return sharedMemory_; }
          set {
            sharedMemory_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!dims_.Equals(other.dims_)) return false;
          if (BatchByteSize != other.BatchByteSize) return false;
          if (!object.Equals(SharedMemory, other.SharedMemory)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= dims_.GetHashCode();
          if (BatchByteSize != 0UL) hash ^= BatchByteSize.GetHashCode();
          if (sharedMemory_ != null) hash ^= SharedMemory.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          dims_.WriteTo(output, _repeated_dims_codec);
          if (BatchByteSize != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(BatchByteSize);
          }
          if (sharedMemory_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(SharedMemory);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += dims_.CalculateSize(_repeated_dims_codec);
          if (BatchByteSize != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BatchByteSize);
          }
          if (sharedMemory_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SharedMemory);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          dims_.Add(other.dims_);
          if (other.BatchByteSize != 0UL) {
            BatchByteSize = other.BatchByteSize;
          }
          if (other.sharedMemory_ != null) {
            if (sharedMemory_ == null) {
              SharedMemory = new global::Triton.MemoryAnalyzer.Client.InferSharedMemory();
            }
            SharedMemory.MergeFrom(other.SharedMemory);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                dims_.AddEntriesFrom(input, _repeated_dims_codec);
                break;
              }
              case 24: {
                BatchByteSize = input.ReadUInt64();
                break;
              }
              case 34: {
                if (sharedMemory_ == null) {
                  SharedMemory = new global::Triton.MemoryAnalyzer.Client.InferSharedMemory();
                }
                input.ReadMessage(SharedMemory);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///@@  .. cpp:var:: message Output
      ///@@
      ///@@     Meta-data for a requested output tensor as part of an inferencing
      ///@@     request.
      ///@@
      /// </summary>
      public sealed partial class Output : pb::IMessage<Output> {
        private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Output> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output(Output other) : this() {
          name_ = other.name_;
          cls_ = other.cls_ != null ? other.cls_.Clone() : null;
          sharedMemory_ = other.sharedMemory_ != null ? other.sharedMemory_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output Clone() {
          return new Output(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///@@    .. cpp:var:: string name
        ///@@
        ///@@       The name of the output tensor.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cls" field.</summary>
        public const int ClsFieldNumber = 3;
        private global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Types.Class cls_;
        /// <summary>
        ///@@    .. cpp:var:: Class cls
        ///@@
        ///@@       Optional. If defined return this output as a classification
        ///@@       instead of raw data. The output tensor will be interpreted as
        ///@@       probabilities and the classifications associated with the
        ///@@       highest probabilities will be returned.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Types.Class Cls {
          get { return cls_; }
          set {
            cls_ = value;
          }
        }

        /// <summary>Field number for the "shared_memory" field.</summary>
        public const int SharedMemoryFieldNumber = 4;
        private global::Triton.MemoryAnalyzer.Client.InferSharedMemory sharedMemory_;
        /// <summary>
        ///@@    .. cpp:var:: InferSharedMemory shared_memory
        ///@@
        ///@@       It is the location in shared memory that the result tensor data
        ///@@       for this output will be written. Using shared memory is optional
        ///@@       but if this message is used, all fields are required.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.InferSharedMemory SharedMemory {
          get { return sharedMemory_; }
          set {
            sharedMemory_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Output);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Output other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(Cls, other.Cls)) return false;
          if (!object.Equals(SharedMemory, other.SharedMemory)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (cls_ != null) hash ^= Cls.GetHashCode();
          if (sharedMemory_ != null) hash ^= SharedMemory.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (cls_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Cls);
          }
          if (sharedMemory_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(SharedMemory);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (cls_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cls);
          }
          if (sharedMemory_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SharedMemory);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Output other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.cls_ != null) {
            if (cls_ == null) {
              Cls = new global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Types.Class();
            }
            Cls.MergeFrom(other.Cls);
          }
          if (other.sharedMemory_ != null) {
            if (sharedMemory_ == null) {
              SharedMemory = new global::Triton.MemoryAnalyzer.Client.InferSharedMemory();
            }
            SharedMemory.MergeFrom(other.SharedMemory);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                if (cls_ == null) {
                  Cls = new global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Types.Class();
                }
                input.ReadMessage(Cls);
                break;
              }
              case 34: {
                if (sharedMemory_ == null) {
                  SharedMemory = new global::Triton.MemoryAnalyzer.Client.InferSharedMemory();
                }
                input.ReadMessage(SharedMemory);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Output message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///@@    .. cpp:var:: message Class
          ///@@
          ///@@       Options for an output returned as a classification.
          ///@@
          /// </summary>
          public sealed partial class Class : pb::IMessage<Class> {
            private static readonly pb::MessageParser<Class> _parser = new pb::MessageParser<Class>(() => new Class());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Class> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Triton.MemoryAnalyzer.Client.InferRequestHeader.Types.Output.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Class() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Class(Class other) : this() {
              count_ = other.count_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Class Clone() {
              return new Class(this);
            }

            /// <summary>Field number for the "count" field.</summary>
            public const int CountFieldNumber = 1;
            private uint count_;
            /// <summary>
            ///@@      .. cpp:var:: uint32 count
            ///@@
            ///@@         Indicates how many classification values should be returned
            ///@@         for the output. The 'count' highest priority values are
            ///@@         returned.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Count {
              get { return count_; }
              set {
                count_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Class);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Class other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Count != other.Count) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Count != 0) hash ^= Count.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Count != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Count);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Count != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Class other) {
              if (other == null) {
                return;
              }
              if (other.Count != 0) {
                Count = other.Count;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Count = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///@@
  ///@@.. cpp:var:: message InferResponseHeader
  ///@@
  ///@@   Meta-data for the response to an inferencing request. The actual output
  ///@@   data is delivered separate from this header, in the HTTP body for an HTTP
  ///@@   request, or in the :cpp:var:`InferResponse` message for a gRPC request.
  ///@@
  /// </summary>
  public sealed partial class InferResponseHeader : pb::IMessage<InferResponseHeader> {
    private static readonly pb::MessageParser<InferResponseHeader> _parser = new pb::MessageParser<InferResponseHeader>(() => new InferResponseHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InferResponseHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Triton.MemoryAnalyzer.Client.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferResponseHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferResponseHeader(InferResponseHeader other) : this() {
      id_ = other.id_;
      modelName_ = other.modelName_;
      modelVersion_ = other.modelVersion_;
      batchSize_ = other.batchSize_;
      output_ = other.output_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InferResponseHeader Clone() {
      return new InferResponseHeader(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private ulong id_;
    /// <summary>
    ///@@  .. cpp:var:: uint64 id
    ///@@
    ///@@     The ID of the inference response. The response will have the same ID
    ///@@     as the ID of its originated request. The request sender can use
    ///@@     the ID to correlate the response to corresponding request if needed.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 1;
    private string modelName_ = "";
    /// <summary>
    ///@@  .. cpp:var:: string model_name
    ///@@
    ///@@     The name of the model that produced the outputs.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_version" field.</summary>
    public const int ModelVersionFieldNumber = 2;
    private long modelVersion_;
    /// <summary>
    ///@@  .. cpp:var:: int64 model_version
    ///@@
    ///@@     The version of the model that produced the outputs.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ModelVersion {
      get { return modelVersion_; }
      set {
        modelVersion_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 3;
    private uint batchSize_;
    /// <summary>
    ///@@  .. cpp:var:: uint32 batch_size
    ///@@
    ///@@     The batch size of the outputs. This will always be equal to the
    ///@@     batch size of the inputs. For models that don't support
    ///@@     batching the batch_size will be 1.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output> _repeated_output_codec
        = pb::FieldCodec.ForMessage(34, global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Parser);
    private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output> output_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output>();
    /// <summary>
    ///@@  .. cpp:var:: Output output (repeated)
    ///@@
    ///@@     The outputs, in the same order as they were requested in
    ///@@     :cpp:var:`InferRequestHeader`.
    ///@@
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output> Output {
      get { return output_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InferResponseHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InferResponseHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ModelName != other.ModelName) return false;
      if (ModelVersion != other.ModelVersion) return false;
      if (BatchSize != other.BatchSize) return false;
      if(!output_.Equals(other.output_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ModelVersion != 0L) hash ^= ModelVersion.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      hash ^= output_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelName);
      }
      if (ModelVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ModelVersion);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BatchSize);
      }
      output_.WriteTo(output, _repeated_output_codec);
      if (Id != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ModelVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ModelVersion);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      size += output_.CalculateSize(_repeated_output_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InferResponseHeader other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ModelVersion != 0L) {
        ModelVersion = other.ModelVersion;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      output_.Add(other.output_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelName = input.ReadString();
            break;
          }
          case 16: {
            ModelVersion = input.ReadInt64();
            break;
          }
          case 24: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 34: {
            output_.AddEntriesFrom(input, _repeated_output_codec);
            break;
          }
          case 40: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InferResponseHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///@@  .. cpp:var:: message Output
      ///@@
      ///@@     Meta-data for an output tensor requested as part of an inferencing
      ///@@     request.
      ///@@
      /// </summary>
      public sealed partial class Output : pb::IMessage<Output> {
        private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Output> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output(Output other) : this() {
          name_ = other.name_;
          raw_ = other.raw_ != null ? other.raw_.Clone() : null;
          batchClasses_ = other.batchClasses_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output Clone() {
          return new Output(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///@@    .. cpp:var:: string name
        ///@@
        ///@@       The name of the output tensor.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "raw" field.</summary>
        public const int RawFieldNumber = 2;
        private global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Raw raw_;
        /// <summary>
        ///@@    .. cpp:var:: Raw raw
        ///@@
        ///@@       If specified deliver results for this output as raw tensor data.
        ///@@       The actual output data is delivered in the HTTP body for an HTTP
        ///@@       request, or in the :cpp:var:`InferResponse` message for a gRPC
        ///@@       request. Only one of 'raw' and 'batch_classes' may be specified.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Raw Raw {
          get { return raw_; }
          set {
            raw_ = value;
          }
        }

        /// <summary>Field number for the "batch_classes" field.</summary>
        public const int BatchClassesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes> _repeated_batchClasses_codec
            = pb::FieldCodec.ForMessage(26, global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes.Parser);
        private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes> batchClasses_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes>();
        /// <summary>
        ///@@    .. cpp:var:: Classes batch_classes (repeated)
        ///@@
        ///@@       If specified deliver results for this output as classifications.
        ///@@       There is one :cpp:var:`Classes` object for each batch entry in
        ///@@       the output. Only one of 'raw' and 'batch_classes' may be
        ///@@       specified.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Classes> BatchClasses {
          get { return batchClasses_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Output);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Output other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(Raw, other.Raw)) return false;
          if(!batchClasses_.Equals(other.batchClasses_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (raw_ != null) hash ^= Raw.GetHashCode();
          hash ^= batchClasses_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (raw_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Raw);
          }
          batchClasses_.WriteTo(output, _repeated_batchClasses_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (raw_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raw);
          }
          size += batchClasses_.CalculateSize(_repeated_batchClasses_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Output other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.raw_ != null) {
            if (raw_ == null) {
              Raw = new global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Raw();
            }
            Raw.MergeFrom(other.Raw);
          }
          batchClasses_.Add(other.batchClasses_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (raw_ == null) {
                  Raw = new global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Raw();
                }
                input.ReadMessage(Raw);
                break;
              }
              case 26: {
                batchClasses_.AddEntriesFrom(input, _repeated_batchClasses_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Output message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///@@    .. cpp:var:: message Raw
          ///@@
          ///@@       Meta-data for an output tensor being returned as raw data.
          ///@@
          /// </summary>
          public sealed partial class Raw : pb::IMessage<Raw> {
            private static readonly pb::MessageParser<Raw> _parser = new pb::MessageParser<Raw>(() => new Raw());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Raw> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Raw() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Raw(Raw other) : this() {
              dims_ = other.dims_.Clone();
              batchByteSize_ = other.batchByteSize_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Raw Clone() {
              return new Raw(this);
            }

            /// <summary>Field number for the "dims" field.</summary>
            public const int DimsFieldNumber = 1;
            private static readonly pb::FieldCodec<long> _repeated_dims_codec
                = pb::FieldCodec.ForInt64(10);
            private readonly pbc::RepeatedField<long> dims_ = new pbc::RepeatedField<long>();
            /// <summary>
            ///@@      .. cpp:var:: int64 dims (repeated)
            ///@@
            ///@@         The shape of the output tensor, not including the batch
            ///@@         dimension.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<long> Dims {
              get { return dims_; }
            }

            /// <summary>Field number for the "batch_byte_size" field.</summary>
            public const int BatchByteSizeFieldNumber = 2;
            private ulong batchByteSize_;
            /// <summary>
            ///@@      .. cpp:var:: uint64 batch_byte_size
            ///@@
            ///@@         The full size of the output tensor, in bytes. For a
            ///@@         batch output, this is the size of the entire batch.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong BatchByteSize {
              get { return batchByteSize_; }
              set {
                batchByteSize_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Raw);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Raw other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!dims_.Equals(other.dims_)) return false;
              if (BatchByteSize != other.BatchByteSize) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= dims_.GetHashCode();
              if (BatchByteSize != 0UL) hash ^= BatchByteSize.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              dims_.WriteTo(output, _repeated_dims_codec);
              if (BatchByteSize != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(BatchByteSize);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += dims_.CalculateSize(_repeated_dims_codec);
              if (BatchByteSize != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BatchByteSize);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Raw other) {
              if (other == null) {
                return;
              }
              dims_.Add(other.dims_);
              if (other.BatchByteSize != 0UL) {
                BatchByteSize = other.BatchByteSize;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    dims_.AddEntriesFrom(input, _repeated_dims_codec);
                    break;
                  }
                  case 16: {
                    BatchByteSize = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///@@    .. cpp:var:: message Class
          ///@@
          ///@@       Information about each classification for this output.
          ///@@
          /// </summary>
          public sealed partial class Class : pb::IMessage<Class> {
            private static readonly pb::MessageParser<Class> _parser = new pb::MessageParser<Class>(() => new Class());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Class> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Class() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Class(Class other) : this() {
              idx_ = other.idx_;
              value_ = other.value_;
              label_ = other.label_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Class Clone() {
              return new Class(this);
            }

            /// <summary>Field number for the "idx" field.</summary>
            public const int IdxFieldNumber = 1;
            private int idx_;
            /// <summary>
            ///@@      .. cpp:var:: int32 idx
            ///@@
            ///@@         The classification index.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Idx {
              get { return idx_; }
              set {
                idx_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private float value_;
            /// <summary>
            ///@@      .. cpp:var:: float value
            ///@@
            ///@@         The classification value as a float (typically a
            ///@@         probability).
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 3;
            private string label_ = "";
            /// <summary>
            ///@@      .. cpp:var:: string label
            ///@@
            ///@@         The label for the class (optional, only available if provided
            ///@@         by the model).
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Class);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Class other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Idx != other.Idx) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
              if (Label != other.Label) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Idx != 0) hash ^= Idx.GetHashCode();
              if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
              if (Label.Length != 0) hash ^= Label.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Idx != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Idx);
              }
              if (Value != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Value);
              }
              if (Label.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Label);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Idx != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
              }
              if (Value != 0F) {
                size += 1 + 4;
              }
              if (Label.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Class other) {
              if (other == null) {
                return;
              }
              if (other.Idx != 0) {
                Idx = other.Idx;
              }
              if (other.Value != 0F) {
                Value = other.Value;
              }
              if (other.Label.Length != 0) {
                Label = other.Label;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Idx = input.ReadInt32();
                    break;
                  }
                  case 21: {
                    Value = input.ReadFloat();
                    break;
                  }
                  case 26: {
                    Label = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///@@    .. cpp:var:: message Classes
          ///@@
          ///@@       Meta-data for an output tensor being returned as classifications.
          ///@@
          /// </summary>
          public sealed partial class Classes : pb::IMessage<Classes> {
            private static readonly pb::MessageParser<Classes> _parser = new pb::MessageParser<Classes>(() => new Classes());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Classes> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classes() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classes(Classes other) : this() {
              cls_ = other.cls_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classes Clone() {
              return new Classes(this);
            }

            /// <summary>Field number for the "cls" field.</summary>
            public const int ClsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class> _repeated_cls_codec
                = pb::FieldCodec.ForMessage(10, global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class.Parser);
            private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class> cls_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class>();
            /// <summary>
            ///@@      .. cpp:var:: Class cls (repeated)
            ///@@
            ///@@         The topk classes for this output.
            ///@@
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.InferResponseHeader.Types.Output.Types.Class> Cls {
              get { return cls_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Classes);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Classes other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!cls_.Equals(other.cls_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= cls_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              cls_.WriteTo(output, _repeated_cls_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += cls_.CalculateSize(_repeated_cls_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Classes other) {
              if (other == null) {
                return;
              }
              cls_.Add(other.cls_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    cls_.AddEntriesFrom(input, _repeated_cls_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
