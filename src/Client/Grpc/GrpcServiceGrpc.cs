// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: grpc_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2018-2020, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Triton.MemoryAnalyzer.Client
{
    /// <summary>
    ///@@
    ///@@.. cpp:var:: service GRPCService
    ///@@
    ///@@   Inference Server GRPC endpoints.
    ///@@
    /// </summary>
    public static partial class GRPCService
  {
    static readonly string __ServiceName = "nvidia.inferenceserver.GRPCService";

    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.StatusRequest> __Marshaller_nvidia_inferenceserver_StatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.StatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.StatusResponse> __Marshaller_nvidia_inferenceserver_StatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.StatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.HealthRequest> __Marshaller_nvidia_inferenceserver_HealthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.HealthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.HealthResponse> __Marshaller_nvidia_inferenceserver_HealthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.HealthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.InferRequest> __Marshaller_nvidia_inferenceserver_InferRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.InferRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.InferResponse> __Marshaller_nvidia_inferenceserver_InferResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.InferResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.ModelControlRequest> __Marshaller_nvidia_inferenceserver_ModelControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.ModelControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.ModelControlResponse> __Marshaller_nvidia_inferenceserver_ModelControlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.ModelControlResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest> __Marshaller_nvidia_inferenceserver_SharedMemoryControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse> __Marshaller_nvidia_inferenceserver_SharedMemoryControlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.RepositoryRequest> __Marshaller_nvidia_inferenceserver_RepositoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.RepositoryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Triton.MemoryAnalyzer.Client.RepositoryResponse> __Marshaller_nvidia_inferenceserver_RepositoryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Triton.MemoryAnalyzer.Client.RepositoryResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.StatusRequest, global::Triton.MemoryAnalyzer.Client.StatusResponse> __Method_Status = new grpc::Method<global::Triton.MemoryAnalyzer.Client.StatusRequest, global::Triton.MemoryAnalyzer.Client.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_nvidia_inferenceserver_StatusRequest,
        __Marshaller_nvidia_inferenceserver_StatusResponse);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.HealthRequest, global::Triton.MemoryAnalyzer.Client.HealthResponse> __Method_Health = new grpc::Method<global::Triton.MemoryAnalyzer.Client.HealthRequest, global::Triton.MemoryAnalyzer.Client.HealthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Health",
        __Marshaller_nvidia_inferenceserver_HealthRequest,
        __Marshaller_nvidia_inferenceserver_HealthResponse);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse> __Method_Infer = new grpc::Method<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Infer",
        __Marshaller_nvidia_inferenceserver_InferRequest,
        __Marshaller_nvidia_inferenceserver_InferResponse);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse> __Method_StreamInfer = new grpc::Method<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamInfer",
        __Marshaller_nvidia_inferenceserver_InferRequest,
        __Marshaller_nvidia_inferenceserver_InferResponse);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.ModelControlRequest, global::Triton.MemoryAnalyzer.Client.ModelControlResponse> __Method_ModelControl = new grpc::Method<global::Triton.MemoryAnalyzer.Client.ModelControlRequest, global::Triton.MemoryAnalyzer.Client.ModelControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModelControl",
        __Marshaller_nvidia_inferenceserver_ModelControlRequest,
        __Marshaller_nvidia_inferenceserver_ModelControlResponse);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest, global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse> __Method_SharedMemoryControl = new grpc::Method<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest, global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SharedMemoryControl",
        __Marshaller_nvidia_inferenceserver_SharedMemoryControlRequest,
        __Marshaller_nvidia_inferenceserver_SharedMemoryControlResponse);

    static readonly grpc::Method<global::Triton.MemoryAnalyzer.Client.RepositoryRequest, global::Triton.MemoryAnalyzer.Client.RepositoryResponse> __Method_Repository = new grpc::Method<global::Triton.MemoryAnalyzer.Client.RepositoryRequest, global::Triton.MemoryAnalyzer.Client.RepositoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Repository",
        __Marshaller_nvidia_inferenceserver_RepositoryRequest,
        __Marshaller_nvidia_inferenceserver_RepositoryResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Triton.MemoryAnalyzer.Client.GrpcServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GRPCService</summary>
    public abstract partial class GRPCServiceBase
    {
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
      ///@@
      ///@@     Get status for entire inference server or for a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Triton.MemoryAnalyzer.Client.StatusResponse> Status(global::Triton.MemoryAnalyzer.Client.StatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
      ///@@
      ///@@     Check liveness and readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Triton.MemoryAnalyzer.Client.HealthResponse> Health(global::Triton.MemoryAnalyzer.Client.HealthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
      ///@@
      ///@@     Request inference using a specific model. [ To handle large input
      ///@@     tensors likely need to set the maximum message size to that they
      ///@@     can be transmitted in one pass.
      ///@@
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Triton.MemoryAnalyzer.Client.InferResponse> Infer(global::Triton.MemoryAnalyzer.Client.InferRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc StreamInfer(stream InferRequest) returns (stream
      ///@@     InferResponse)
      ///@@
      ///@@     Request inferences using a specific model in a streaming manner.
      ///@@     Individual inference requests sent through the same stream will be
      ///@@     processed in order and be returned on completion
      ///@@
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamInfer(grpc::IAsyncStreamReader<global::Triton.MemoryAnalyzer.Client.InferRequest> requestStream, grpc::IServerStreamWriter<global::Triton.MemoryAnalyzer.Client.InferResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
      ///@@     (ModelControlResponse)
      ///@@
      ///@@     Request to load / unload a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Triton.MemoryAnalyzer.Client.ModelControlResponse> ModelControl(global::Triton.MemoryAnalyzer.Client.ModelControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
      ///@@     (SharedMemoryControlResponse)
      ///@@
      ///@@     Request to register / unregister a specified shared memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse> SharedMemoryControl(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
      ///@@
      ///@@     Get status associated with the model repository.
      ///@@
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Triton.MemoryAnalyzer.Client.RepositoryResponse> Repository(global::Triton.MemoryAnalyzer.Client.RepositoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GRPCService</summary>
    public partial class GRPCServiceClient : grpc::ClientBase<GRPCServiceClient>
    {
      /// <summary>Creates a new client for GRPCService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GRPCServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GRPCService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GRPCServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GRPCServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GRPCServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
      ///@@
      ///@@     Get status for entire inference server or for a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.StatusResponse Status(global::Triton.MemoryAnalyzer.Client.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
      ///@@
      ///@@     Get status for entire inference server or for a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.StatusResponse Status(global::Triton.MemoryAnalyzer.Client.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
      ///@@
      ///@@     Get status for entire inference server or for a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.StatusResponse> StatusAsync(global::Triton.MemoryAnalyzer.Client.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(StatusRequest) returns (StatusResponse)
      ///@@
      ///@@     Get status for entire inference server or for a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.StatusResponse> StatusAsync(global::Triton.MemoryAnalyzer.Client.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
      ///@@
      ///@@     Check liveness and readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.HealthResponse Health(global::Triton.MemoryAnalyzer.Client.HealthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Health(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
      ///@@
      ///@@     Check liveness and readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.HealthResponse Health(global::Triton.MemoryAnalyzer.Client.HealthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Health, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
      ///@@
      ///@@     Check liveness and readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.HealthResponse> HealthAsync(global::Triton.MemoryAnalyzer.Client.HealthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Health(HealthRequest) returns (HealthResponse)
      ///@@
      ///@@     Check liveness and readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.HealthResponse> HealthAsync(global::Triton.MemoryAnalyzer.Client.HealthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Health, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
      ///@@
      ///@@     Request inference using a specific model. [ To handle large input
      ///@@     tensors likely need to set the maximum message size to that they
      ///@@     can be transmitted in one pass.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.InferResponse Infer(global::Triton.MemoryAnalyzer.Client.InferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Infer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
      ///@@
      ///@@     Request inference using a specific model. [ To handle large input
      ///@@     tensors likely need to set the maximum message size to that they
      ///@@     can be transmitted in one pass.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.InferResponse Infer(global::Triton.MemoryAnalyzer.Client.InferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Infer, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
      ///@@
      ///@@     Request inference using a specific model. [ To handle large input
      ///@@     tensors likely need to set the maximum message size to that they
      ///@@     can be transmitted in one pass.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.InferResponse> InferAsync(global::Triton.MemoryAnalyzer.Client.InferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Infer(InferRequest) returns (InferResponse)
      ///@@
      ///@@     Request inference using a specific model. [ To handle large input
      ///@@     tensors likely need to set the maximum message size to that they
      ///@@     can be transmitted in one pass.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.InferResponse> InferAsync(global::Triton.MemoryAnalyzer.Client.InferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Infer, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc StreamInfer(stream InferRequest) returns (stream
      ///@@     InferResponse)
      ///@@
      ///@@     Request inferences using a specific model in a streaming manner.
      ///@@     Individual inference requests sent through the same stream will be
      ///@@     processed in order and be returned on completion
      ///@@
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse> StreamInfer(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInfer(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc StreamInfer(stream InferRequest) returns (stream
      ///@@     InferResponse)
      ///@@
      ///@@     Request inferences using a specific model in a streaming manner.
      ///@@     Individual inference requests sent through the same stream will be
      ///@@     processed in order and be returned on completion
      ///@@
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse> StreamInfer(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamInfer, null, options);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
      ///@@     (ModelControlResponse)
      ///@@
      ///@@     Request to load / unload a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.ModelControlResponse ModelControl(global::Triton.MemoryAnalyzer.Client.ModelControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelControl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
      ///@@     (ModelControlResponse)
      ///@@
      ///@@     Request to load / unload a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.ModelControlResponse ModelControl(global::Triton.MemoryAnalyzer.Client.ModelControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModelControl, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
      ///@@     (ModelControlResponse)
      ///@@
      ///@@     Request to load / unload a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.ModelControlResponse> ModelControlAsync(global::Triton.MemoryAnalyzer.Client.ModelControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelControlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelControl(ModelControlRequest) returns
      ///@@     (ModelControlResponse)
      ///@@
      ///@@     Request to load / unload a specified model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.ModelControlResponse> ModelControlAsync(global::Triton.MemoryAnalyzer.Client.ModelControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModelControl, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
      ///@@     (SharedMemoryControlResponse)
      ///@@
      ///@@     Request to register / unregister a specified shared memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse SharedMemoryControl(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SharedMemoryControl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
      ///@@     (SharedMemoryControlResponse)
      ///@@
      ///@@     Request to register / unregister a specified shared memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse SharedMemoryControl(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SharedMemoryControl, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
      ///@@     (SharedMemoryControlResponse)
      ///@@
      ///@@     Request to register / unregister a specified shared memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse> SharedMemoryControlAsync(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SharedMemoryControlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SharedMemoryControl(SharedMemoryControlRequest) returns
      ///@@     (SharedMemoryControlResponse)
      ///@@
      ///@@     Request to register / unregister a specified shared memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse> SharedMemoryControlAsync(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SharedMemoryControl, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
      ///@@
      ///@@     Get status associated with the model repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.RepositoryResponse Repository(global::Triton.MemoryAnalyzer.Client.RepositoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Repository(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
      ///@@
      ///@@     Get status associated with the model repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Triton.MemoryAnalyzer.Client.RepositoryResponse Repository(global::Triton.MemoryAnalyzer.Client.RepositoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Repository, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
      ///@@
      ///@@     Get status associated with the model repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.RepositoryResponse> RepositoryAsync(global::Triton.MemoryAnalyzer.Client.RepositoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc Status(RepositoryRequest) returns (RepositoryResponse)
      ///@@
      ///@@     Get status associated with the model repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Triton.MemoryAnalyzer.Client.RepositoryResponse> RepositoryAsync(global::Triton.MemoryAnalyzer.Client.RepositoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Repository, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GRPCServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GRPCServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GRPCServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Status, serviceImpl.Status)
          .AddMethod(__Method_Health, serviceImpl.Health)
          .AddMethod(__Method_Infer, serviceImpl.Infer)
          .AddMethod(__Method_StreamInfer, serviceImpl.StreamInfer)
          .AddMethod(__Method_ModelControl, serviceImpl.ModelControl)
          .AddMethod(__Method_SharedMemoryControl, serviceImpl.SharedMemoryControl)
          .AddMethod(__Method_Repository, serviceImpl.Repository).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GRPCServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Status, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Triton.MemoryAnalyzer.Client.StatusRequest, global::Triton.MemoryAnalyzer.Client.StatusResponse>(serviceImpl.Status));
      serviceBinder.AddMethod(__Method_Health, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Triton.MemoryAnalyzer.Client.HealthRequest, global::Triton.MemoryAnalyzer.Client.HealthResponse>(serviceImpl.Health));
      serviceBinder.AddMethod(__Method_Infer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse>(serviceImpl.Infer));
      serviceBinder.AddMethod(__Method_StreamInfer, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Triton.MemoryAnalyzer.Client.InferRequest, global::Triton.MemoryAnalyzer.Client.InferResponse>(serviceImpl.StreamInfer));
      serviceBinder.AddMethod(__Method_ModelControl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Triton.MemoryAnalyzer.Client.ModelControlRequest, global::Triton.MemoryAnalyzer.Client.ModelControlResponse>(serviceImpl.ModelControl));
      serviceBinder.AddMethod(__Method_SharedMemoryControl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequest, global::Triton.MemoryAnalyzer.Client.SharedMemoryControlResponse>(serviceImpl.SharedMemoryControl));
      serviceBinder.AddMethod(__Method_Repository, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Triton.MemoryAnalyzer.Client.RepositoryRequest, global::Triton.MemoryAnalyzer.Client.RepositoryResponse>(serviceImpl.Repository));
    }

  }
}
#endregion
