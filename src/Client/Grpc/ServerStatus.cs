// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: server_status.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace Triton.MemoryAnalyzer.Client
{

    /// <summary>Holder for reflection information generated from server_status.proto</summary>
    public static partial class ServerStatusReflection
    {

        #region Descriptor
        /// <summary>File descriptor for server_status.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static ServerStatusReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChNzZXJ2ZXJfc3RhdHVzLnByb3RvEhZudmlkaWEuaW5mZXJlbmNlc2VydmVy",
                  "GhJtb2RlbF9jb25maWcucHJvdG8iNAoMU3RhdER1cmF0aW9uEg0KBWNvdW50",
                  "GAEgASgEEhUKDXRvdGFsX3RpbWVfbnMYAiABKAQiSwoSU3RhdHVzUmVxdWVz",
                  "dFN0YXRzEjUKB3N1Y2Nlc3MYASABKAsyJC5udmlkaWEuaW5mZXJlbmNlc2Vy",
                  "dmVyLlN0YXREdXJhdGlvbiJLChJIZWFsdGhSZXF1ZXN0U3RhdHMSNQoHc3Vj",
                  "Y2VzcxgBIAEoCzIkLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuU3RhdER1cmF0",
                  "aW9uIlEKGE1vZGVsQ29udHJvbFJlcXVlc3RTdGF0cxI1CgdzdWNjZXNzGAEg",
                  "ASgLMiQubnZpZGlhLmluZmVyZW5jZXNlcnZlci5TdGF0RHVyYXRpb24iWAof",
                  "U2hhcmVkTWVtb3J5Q29udHJvbFJlcXVlc3RTdGF0cxI1CgdzdWNjZXNzGAEg",
                  "ASgLMiQubnZpZGlhLmluZmVyZW5jZXNlcnZlci5TdGF0RHVyYXRpb24iTwoW",
                  "UmVwb3NpdG9yeVJlcXVlc3RTdGF0cxI1CgdzdWNjZXNzGAEgASgLMiQubnZp",
                  "ZGlhLmluZmVyZW5jZXNlcnZlci5TdGF0RHVyYXRpb24i7AEKEUluZmVyUmVx",
                  "dWVzdFN0YXRzEjUKB3N1Y2Nlc3MYASABKAsyJC5udmlkaWEuaW5mZXJlbmNl",
                  "c2VydmVyLlN0YXREdXJhdGlvbhI0CgZmYWlsZWQYAiABKAsyJC5udmlkaWEu",
                  "aW5mZXJlbmNlc2VydmVyLlN0YXREdXJhdGlvbhI1Cgdjb21wdXRlGAMgASgL",
                  "MiQubnZpZGlhLmluZmVyZW5jZXNlcnZlci5TdGF0RHVyYXRpb24SMwoFcXVl",
                  "dWUYBCABKAsyJC5udmlkaWEuaW5mZXJlbmNlc2VydmVyLlN0YXREdXJhdGlv",
                  "biIoChVNb2RlbFJlYWR5U3RhdGVSZWFzb24SDwoHbWVzc2FnZRgBIAEoCSK5",
                  "AwoSTW9kZWxWZXJzaW9uU3RhdHVzEjwKC3JlYWR5X3N0YXRlGAEgASgOMicu",
                  "bnZpZGlhLmluZmVyZW5jZXNlcnZlci5Nb2RlbFJlYWR5U3RhdGUSSQoScmVh",
                  "ZHlfc3RhdGVfcmVhc29uGAUgASgLMi0ubnZpZGlhLmluZmVyZW5jZXNlcnZl",
                  "ci5Nb2RlbFJlYWR5U3RhdGVSZWFzb24STwoLaW5mZXJfc3RhdHMYAiADKAsy",
                  "Oi5udmlkaWEuaW5mZXJlbmNlc2VydmVyLk1vZGVsVmVyc2lvblN0YXR1cy5J",
                  "bmZlclN0YXRzRW50cnkSHQoVbW9kZWxfZXhlY3V0aW9uX2NvdW50GAMgASgE",
                  "Eh0KFW1vZGVsX2luZmVyZW5jZV9jb3VudBgEIAEoBBItCiVsYXN0X2luZmVy",
                  "ZW5jZV90aW1lc3RhbXBfbWlsbGlzZWNvbmRzGAYgASgEGlwKD0luZmVyU3Rh",
                  "dHNFbnRyeRILCgNrZXkYASABKA0SOAoFdmFsdWUYAiABKAsyKS5udmlkaWEu",
                  "aW5mZXJlbmNlc2VydmVyLkluZmVyUmVxdWVzdFN0YXRzOgI4ASL0AQoLTW9k",
                  "ZWxTdGF0dXMSMwoGY29uZmlnGAEgASgLMiMubnZpZGlhLmluZmVyZW5jZXNl",
                  "cnZlci5Nb2RlbENvbmZpZxJOCg52ZXJzaW9uX3N0YXR1cxgCIAMoCzI2Lm52",
                  "aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuTW9kZWxTdGF0dXMuVmVyc2lvblN0YXR1",
                  "c0VudHJ5GmAKElZlcnNpb25TdGF0dXNFbnRyeRILCgNrZXkYASABKAMSOQoF",
                  "dmFsdWUYAiABKAsyKi5udmlkaWEuaW5mZXJlbmNlc2VydmVyLk1vZGVsVmVy",
                  "c2lvblN0YXR1czoCOAEi7gIKElNoYXJlZE1lbW9yeVJlZ2lvbhIMCgRuYW1l",
                  "GAEgASgJEl0KFHN5c3RlbV9zaGFyZWRfbWVtb3J5GAIgASgLMj0ubnZpZGlh",
                  "LmluZmVyZW5jZXNlcnZlci5TaGFyZWRNZW1vcnlSZWdpb24uU3lzdGVtU2hh",
                  "cmVkTWVtb3J5SAASWQoSY3VkYV9zaGFyZWRfbWVtb3J5GAMgASgLMjsubnZp",
                  "ZGlhLmluZmVyZW5jZXNlcnZlci5TaGFyZWRNZW1vcnlSZWdpb24uQ3VkYVNo",
                  "YXJlZE1lbW9yeUgAEhEKCWJ5dGVfc2l6ZRgFIAEoBBo/ChJTeXN0ZW1TaGFy",
                  "ZWRNZW1vcnkSGQoRc2hhcmVkX21lbW9yeV9rZXkYASABKAkSDgoGb2Zmc2V0",
                  "GAIgASgEGiUKEEN1ZGFTaGFyZWRNZW1vcnkSEQoJZGV2aWNlX2lkGAEgASgD",
                  "QhUKE3NoYXJlZF9tZW1vcnlfdHlwZXMilAUKDFNlcnZlclN0YXR1cxIKCgJp",
                  "ZBgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJEj0KC3JlYWR5X3N0YXRlGAcgASgO",
                  "MigubnZpZGlhLmluZmVyZW5jZXNlcnZlci5TZXJ2ZXJSZWFkeVN0YXRlEhEK",
                  "CXVwdGltZV9ucxgDIAEoBBJLCgxtb2RlbF9zdGF0dXMYBCADKAsyNS5udmlk",
                  "aWEuaW5mZXJlbmNlc2VydmVyLlNlcnZlclN0YXR1cy5Nb2RlbFN0YXR1c0Vu",
                  "dHJ5EkAKDHN0YXR1c19zdGF0cxgFIAEoCzIqLm52aWRpYS5pbmZlcmVuY2Vz",
                  "ZXJ2ZXIuU3RhdHVzUmVxdWVzdFN0YXRzEkAKDGhlYWx0aF9zdGF0cxgIIAEo",
                  "CzIqLm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuSGVhbHRoUmVxdWVzdFN0YXRz",
                  "Ek0KE21vZGVsX2NvbnRyb2xfc3RhdHMYCSABKAsyMC5udmlkaWEuaW5mZXJl",
                  "bmNlc2VydmVyLk1vZGVsQ29udHJvbFJlcXVlc3RTdGF0cxJSChFzaG1fY29u",
                  "dHJvbF9zdGF0cxgKIAEoCzI3Lm52aWRpYS5pbmZlcmVuY2VzZXJ2ZXIuU2hh",
                  "cmVkTWVtb3J5Q29udHJvbFJlcXVlc3RTdGF0cxJIChByZXBvc2l0b3J5X3N0",
                  "YXRzGAsgASgLMi4ubnZpZGlhLmluZmVyZW5jZXNlcnZlci5SZXBvc2l0b3J5",
                  "UmVxdWVzdFN0YXRzGlcKEE1vZGVsU3RhdHVzRW50cnkSCwoDa2V5GAEgASgJ",
                  "EjIKBXZhbHVlGAIgASgLMiMubnZpZGlhLmluZmVyZW5jZXNlcnZlci5Nb2Rl",
                  "bFN0YXR1czoCOAEiXgoSU2hhcmVkTWVtb3J5U3RhdHVzEkgKFHNoYXJlZF9t",
                  "ZW1vcnlfcmVnaW9uGAIgAygLMioubnZpZGlhLmluZmVyZW5jZXNlcnZlci5T",
                  "aGFyZWRNZW1vcnlSZWdpb24iewoUTW9kZWxSZXBvc2l0b3J5SW5kZXgSRwoG",
                  "bW9kZWxzGAEgAygLMjcubnZpZGlhLmluZmVyZW5jZXNlcnZlci5Nb2RlbFJl",
                  "cG9zaXRvcnlJbmRleC5Nb2RlbEVudHJ5GhoKCk1vZGVsRW50cnkSDAoEbmFt",
                  "ZRgBIAEoCSp0Cg9Nb2RlbFJlYWR5U3RhdGUSEQoNTU9ERUxfVU5LTk9XThAA",
                  "Eg8KC01PREVMX1JFQURZEAESFQoRTU9ERUxfVU5BVkFJTEFCTEUQAhIRCg1N",
                  "T0RFTF9MT0FESU5HEAMSEwoPTU9ERUxfVU5MT0FESU5HEAQqhgEKEFNlcnZl",
                  "clJlYWR5U3RhdGUSEgoOU0VSVkVSX0lOVkFMSUQQABIXChNTRVJWRVJfSU5J",
                  "VElBTElaSU5HEAESEAoMU0VSVkVSX1JFQURZEAISEgoOU0VSVkVSX0VYSVRJ",
                  "TkcQAxIfChtTRVJWRVJfRkFJTEVEX1RPX0lOSVRJQUxJWkUQCmIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::Triton.MemoryAnalyzer.Client.ModelConfigReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Triton.MemoryAnalyzer.Client.ModelReadyState), typeof(global::Triton.MemoryAnalyzer.Client.ServerReadyState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.StatDuration), global::Triton.MemoryAnalyzer.Client.StatDuration.Parser, new[]{ "Count", "TotalTimeNs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.StatusRequestStats), global::Triton.MemoryAnalyzer.Client.StatusRequestStats.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.HealthRequestStats), global::Triton.MemoryAnalyzer.Client.HealthRequestStats.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelControlRequestStats), global::Triton.MemoryAnalyzer.Client.ModelControlRequestStats.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequestStats), global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequestStats.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.RepositoryRequestStats), global::Triton.MemoryAnalyzer.Client.RepositoryRequestStats.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.InferRequestStats), global::Triton.MemoryAnalyzer.Client.InferRequestStats.Parser, new[]{ "Success", "Failed", "Compute", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelReadyStateReason), global::Triton.MemoryAnalyzer.Client.ModelReadyStateReason.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelVersionStatus), global::Triton.MemoryAnalyzer.Client.ModelVersionStatus.Parser, new[]{ "ReadyState", "ReadyStateReason", "InferStats", "ModelExecutionCount", "ModelInferenceCount", "LastInferenceTimestampMilliseconds" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelStatus), global::Triton.MemoryAnalyzer.Client.ModelStatus.Parser, new[]{ "Config", "VersionStatus" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion), global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Parser, new[]{ "Name", "SystemSharedMemory", "CudaSharedMemory", "ByteSize" }, new[]{ "SharedMemoryTypes" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory), global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory.Parser, new[]{ "SharedMemoryKey", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory), global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory.Parser, new[]{ "DeviceId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ServerStatus), global::Triton.MemoryAnalyzer.Client.ServerStatus.Parser, new[]{ "Id", "Version", "ReadyState", "UptimeNs", "ModelStatus", "StatusStats", "HealthStats", "ModelControlStats", "ShmControlStats", "RepositoryStats" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.SharedMemoryStatus), global::Triton.MemoryAnalyzer.Client.SharedMemoryStatus.Parser, new[]{ "SharedMemoryRegion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex), global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Parser, new[]{ "Models" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry), global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry.Parser, new[]{ "Name" }, null, null, null)})
                }));
        }
        #endregion

    }
    #region Enums
    /// <summary>
    ///@@
    ///@@.. cpp:enum:: ModelReadyState
    ///@@
    ///@@   Readiness status for models.
    ///@@
    /// </summary>
    public enum ModelReadyState
    {
        /// <summary>
        ///@@  .. cpp:enumerator:: ModelReadyState::MODEL_UNKNOWN = 0
        ///@@
        ///@@     The model is in an unknown state. The model is not available for
        ///@@     inferencing.
        ///@@
        /// </summary>
        [pbr::OriginalName("MODEL_UNKNOWN")] ModelUnknown = 0,
        /// <summary>
        ///@@  .. cpp:enumerator:: ModelReadyState::MODEL_READY = 1
        ///@@
        ///@@     The model is ready and available for inferencing.
        ///@@
        /// </summary>
        [pbr::OriginalName("MODEL_READY")] ModelReady = 1,
        /// <summary>
        ///@@  .. cpp:enumerator:: ModelReadyState::MODEL_UNAVAILABLE = 2
        ///@@
        ///@@     The model is unavailable, indicating that the model failed to
        ///@@     load or has been implicitly or explicitly unloaded. The model is
        ///@@     not available for inferencing.
        ///@@
        /// </summary>
        [pbr::OriginalName("MODEL_UNAVAILABLE")] ModelUnavailable = 2,
        /// <summary>
        ///@@  .. cpp:enumerator:: ModelReadyState::MODEL_LOADING = 3
        ///@@
        ///@@     The model is being loaded by the inference server. The model is
        ///@@     not available for inferencing.
        ///@@
        /// </summary>
        [pbr::OriginalName("MODEL_LOADING")] ModelLoading = 3,
        /// <summary>
        ///@@  .. cpp:enumerator:: ModelReadyState::MODEL_UNLOADING = 4
        ///@@
        ///@@     The model is being unloaded by the inference server. The model is
        ///@@     not available for inferencing.
        ///@@
        /// </summary>
        [pbr::OriginalName("MODEL_UNLOADING")] ModelUnloading = 4,
    }

    /// <summary>
    ///@@
    ///@@.. cpp:enum:: ServerReadyState
    ///@@
    ///@@   Readiness status for the inference server.
    ///@@
    /// </summary>
    public enum ServerReadyState
    {
        /// <summary>
        ///@@  .. cpp:enumerator:: ServerReadyState::SERVER_INVALID = 0
        ///@@
        ///@@     The server is in an invalid state and will likely not
        ///@@     response correctly to any requests.
        ///@@
        /// </summary>
        [pbr::OriginalName("SERVER_INVALID")] ServerInvalid = 0,
        /// <summary>
        ///@@  .. cpp:enumerator:: ServerReadyState::SERVER_INITIALIZING = 1
        ///@@
        ///@@     The server is initializing.
        ///@@
        /// </summary>
        [pbr::OriginalName("SERVER_INITIALIZING")] ServerInitializing = 1,
        /// <summary>
        ///@@  .. cpp:enumerator:: ServerReadyState::SERVER_READY = 2
        ///@@
        ///@@     The server is ready and accepting requests.
        ///@@
        /// </summary>
        [pbr::OriginalName("SERVER_READY")] ServerReady = 2,
        /// <summary>
        ///@@  .. cpp:enumerator:: ServerReadyState::SERVER_EXITING = 3
        ///@@
        ///@@     The server is exiting and will not respond to requests.
        ///@@
        /// </summary>
        [pbr::OriginalName("SERVER_EXITING")] ServerExiting = 3,
        /// <summary>
        ///@@  .. cpp:enumerator:: ServerReadyState::SERVER_FAILED_TO_INITIALIZE = 10
        ///@@
        ///@@     The server did not initialize correctly. Most requests will fail.
        ///@@
        /// </summary>
        [pbr::OriginalName("SERVER_FAILED_TO_INITIALIZE")] ServerFailedToInitialize = 10,
    }

    #endregion

    #region Messages
    /// <summary>
    ///@@
    ///@@.. cpp:var:: message StatDuration
    ///@@
    ///@@   Statistic collecting a duration metric.
    ///@@
    /// </summary>
    public sealed partial class StatDuration : pb::IMessage<StatDuration>
    {
        private static readonly pb::MessageParser<StatDuration> _parser = new pb::MessageParser<StatDuration>(() => new StatDuration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StatDuration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatDuration()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatDuration(StatDuration other) : this()
        {
            count_ = other.count_;
            totalTimeNs_ = other.totalTimeNs_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatDuration Clone()
        {
            return new StatDuration(this);
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 1;
        private ulong count_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 count
        ///@@
        ///@@     Cumulative number of times this metric occurred.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Count
        {
            get { return count_; }
            set
            {
                count_ = value;
            }
        }

        /// <summary>Field number for the "total_time_ns" field.</summary>
        public const int TotalTimeNsFieldNumber = 2;
        private ulong totalTimeNs_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 total_time_ns
        ///@@
        ///@@     Total collected duration of this metric in nanoseconds.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TotalTimeNs
        {
            get { return totalTimeNs_; }
            set
            {
                totalTimeNs_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as StatDuration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StatDuration other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Count != other.Count) return false;
            if (TotalTimeNs != other.TotalTimeNs) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Count != 0UL) hash ^= Count.GetHashCode();
            if (TotalTimeNs != 0UL) hash ^= TotalTimeNs.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Count != 0UL)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(Count);
            }
            if (TotalTimeNs != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(TotalTimeNs);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Count != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
            }
            if (TotalTimeNs != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalTimeNs);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StatDuration other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Count != 0UL)
            {
                Count = other.Count;
            }
            if (other.TotalTimeNs != 0UL)
            {
                TotalTimeNs = other.TotalTimeNs;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Count = input.ReadUInt64();
                            break;
                        }
                    case 16:
                        {
                            TotalTimeNs = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message StatusRequestStats
    ///@@
    ///@@   Statistics collected for Status requests.
    ///@@
    /// </summary>
    public sealed partial class StatusRequestStats : pb::IMessage<StatusRequestStats>
    {
        private static readonly pb::MessageParser<StatusRequestStats> _parser = new pb::MessageParser<StatusRequestStats>(() => new StatusRequestStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StatusRequestStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusRequestStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusRequestStats(StatusRequestStats other) : this()
        {
            success_ = other.success_ != null ? other.success_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusRequestStats Clone()
        {
            return new StatusRequestStats(this);
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.StatDuration success_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration success
        ///@@
        ///@@     Total time required to handle successful Status requests, not
        ///@@     including HTTP or gRPC endpoint termination time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Success
        {
            get { return success_; }
            set
            {
                success_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as StatusRequestStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StatusRequestStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Success, other.Success)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (success_ != null) hash ^= Success.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (success_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Success);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (success_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StatusRequestStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.success_ != null)
            {
                if (success_ == null)
                {
                    Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Success.MergeFrom(other.Success);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (success_ == null)
                            {
                                Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Success);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message HealthRequestStats
    ///@@
    ///@@   Statistics collected for Health requests.
    ///@@
    /// </summary>
    public sealed partial class HealthRequestStats : pb::IMessage<HealthRequestStats>
    {
        private static readonly pb::MessageParser<HealthRequestStats> _parser = new pb::MessageParser<HealthRequestStats>(() => new HealthRequestStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HealthRequestStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HealthRequestStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HealthRequestStats(HealthRequestStats other) : this()
        {
            success_ = other.success_ != null ? other.success_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HealthRequestStats Clone()
        {
            return new HealthRequestStats(this);
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.StatDuration success_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration success
        ///@@
        ///@@     Total time required to handle successful Health requests, not
        ///@@     including HTTP or gRPC endpoint termination time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Success
        {
            get { return success_; }
            set
            {
                success_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as HealthRequestStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HealthRequestStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Success, other.Success)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (success_ != null) hash ^= Success.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (success_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Success);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (success_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HealthRequestStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.success_ != null)
            {
                if (success_ == null)
                {
                    Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Success.MergeFrom(other.Success);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (success_ == null)
                            {
                                Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Success);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message ModelControlRequestStats
    ///@@
    ///@@   Statistics collected for ModelControl requests.
    ///@@
    /// </summary>
    public sealed partial class ModelControlRequestStats : pb::IMessage<ModelControlRequestStats>
    {
        private static readonly pb::MessageParser<ModelControlRequestStats> _parser = new pb::MessageParser<ModelControlRequestStats>(() => new ModelControlRequestStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelControlRequestStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelControlRequestStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelControlRequestStats(ModelControlRequestStats other) : this()
        {
            success_ = other.success_ != null ? other.success_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelControlRequestStats Clone()
        {
            return new ModelControlRequestStats(this);
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.StatDuration success_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration success
        ///@@
        ///@@     Total time required to handle successful ModelControl requests, not
        ///@@     including HTTP or gRPC endpoint termination time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Success
        {
            get { return success_; }
            set
            {
                success_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModelControlRequestStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelControlRequestStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Success, other.Success)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (success_ != null) hash ^= Success.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (success_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Success);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (success_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelControlRequestStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.success_ != null)
            {
                if (success_ == null)
                {
                    Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Success.MergeFrom(other.Success);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (success_ == null)
                            {
                                Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Success);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message SharedMemoryControlRequestStats
    ///@@
    ///@@   Statistics collected for SharedMemoryControl requests.
    ///@@
    /// </summary>
    public sealed partial class SharedMemoryControlRequestStats : pb::IMessage<SharedMemoryControlRequestStats>
    {
        private static readonly pb::MessageParser<SharedMemoryControlRequestStats> _parser = new pb::MessageParser<SharedMemoryControlRequestStats>(() => new SharedMemoryControlRequestStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SharedMemoryControlRequestStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryControlRequestStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryControlRequestStats(SharedMemoryControlRequestStats other) : this()
        {
            success_ = other.success_ != null ? other.success_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryControlRequestStats Clone()
        {
            return new SharedMemoryControlRequestStats(this);
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.StatDuration success_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration success
        ///@@
        ///@@     Total time required to handle successful SharedMemoryControl
        ///@@     requests, not including HTTP or gRPC endpoint termination time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Success
        {
            get { return success_; }
            set
            {
                success_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SharedMemoryControlRequestStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SharedMemoryControlRequestStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Success, other.Success)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (success_ != null) hash ^= Success.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (success_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Success);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (success_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SharedMemoryControlRequestStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.success_ != null)
            {
                if (success_ == null)
                {
                    Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Success.MergeFrom(other.Success);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (success_ == null)
                            {
                                Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Success);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message RepositoryRequestStats
    ///@@
    ///@@   Statistics collected for Repository requests.
    ///@@
    /// </summary>
    public sealed partial class RepositoryRequestStats : pb::IMessage<RepositoryRequestStats>
    {
        private static readonly pb::MessageParser<RepositoryRequestStats> _parser = new pb::MessageParser<RepositoryRequestStats>(() => new RepositoryRequestStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RepositoryRequestStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RepositoryRequestStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RepositoryRequestStats(RepositoryRequestStats other) : this()
        {
            success_ = other.success_ != null ? other.success_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RepositoryRequestStats Clone()
        {
            return new RepositoryRequestStats(this);
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.StatDuration success_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration success
        ///@@
        ///@@     Total time required to handle successful Repository requests, not
        ///@@     including HTTP or gRPC endpoint termination time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Success
        {
            get { return success_; }
            set
            {
                success_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RepositoryRequestStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RepositoryRequestStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Success, other.Success)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (success_ != null) hash ^= Success.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (success_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Success);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (success_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RepositoryRequestStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.success_ != null)
            {
                if (success_ == null)
                {
                    Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Success.MergeFrom(other.Success);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (success_ == null)
                            {
                                Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Success);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message InferRequestStats
    ///@@
    ///@@   Statistics collected for Infer requests.
    ///@@
    /// </summary>
    public sealed partial class InferRequestStats : pb::IMessage<InferRequestStats>
    {
        private static readonly pb::MessageParser<InferRequestStats> _parser = new pb::MessageParser<InferRequestStats>(() => new InferRequestStats());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InferRequestStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InferRequestStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InferRequestStats(InferRequestStats other) : this()
        {
            success_ = other.success_ != null ? other.success_.Clone() : null;
            failed_ = other.failed_ != null ? other.failed_.Clone() : null;
            compute_ = other.compute_ != null ? other.compute_.Clone() : null;
            queue_ = other.queue_ != null ? other.queue_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InferRequestStats Clone()
        {
            return new InferRequestStats(this);
        }

        /// <summary>Field number for the "success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.StatDuration success_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration success
        ///@@
        ///@@     Total time required to handle successful Infer requests, not
        ///@@     including HTTP or GRPC endpoint handling time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Success
        {
            get { return success_; }
            set
            {
                success_ = value;
            }
        }

        /// <summary>Field number for the "failed" field.</summary>
        public const int FailedFieldNumber = 2;
        private global::Triton.MemoryAnalyzer.Client.StatDuration failed_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration failed
        ///@@
        ///@@     Total time required to handle failed Infer requests, not
        ///@@     including HTTP or GRPC endpoint handling time.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Failed
        {
            get { return failed_; }
            set
            {
                failed_ = value;
            }
        }

        /// <summary>Field number for the "compute" field.</summary>
        public const int ComputeFieldNumber = 3;
        private global::Triton.MemoryAnalyzer.Client.StatDuration compute_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration compute
        ///@@
        ///@@     Time required to run inferencing for an inference request;
        ///@@     including time copying input tensors to GPU memory, time
        ///@@     executing the model, and time copying output tensors from GPU
        ///@@     memory.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Compute
        {
            get { return compute_; }
            set
            {
                compute_ = value;
            }
        }

        /// <summary>Field number for the "queue" field.</summary>
        public const int QueueFieldNumber = 4;
        private global::Triton.MemoryAnalyzer.Client.StatDuration queue_;
        /// <summary>
        ///@@  .. cpp:var:: StatDuration queue
        ///@@
        ///@@     Time an inference request waits in scheduling queue for an
        ///@@     available model instance.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatDuration Queue
        {
            get { return queue_; }
            set
            {
                queue_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InferRequestStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InferRequestStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Success, other.Success)) return false;
            if (!object.Equals(Failed, other.Failed)) return false;
            if (!object.Equals(Compute, other.Compute)) return false;
            if (!object.Equals(Queue, other.Queue)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (success_ != null) hash ^= Success.GetHashCode();
            if (failed_ != null) hash ^= Failed.GetHashCode();
            if (compute_ != null) hash ^= Compute.GetHashCode();
            if (queue_ != null) hash ^= Queue.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (success_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Success);
            }
            if (failed_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Failed);
            }
            if (compute_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Compute);
            }
            if (queue_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Queue);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (success_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
            }
            if (failed_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failed);
            }
            if (compute_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compute);
            }
            if (queue_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Queue);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InferRequestStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.success_ != null)
            {
                if (success_ == null)
                {
                    Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Success.MergeFrom(other.Success);
            }
            if (other.failed_ != null)
            {
                if (failed_ == null)
                {
                    Failed = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Failed.MergeFrom(other.Failed);
            }
            if (other.compute_ != null)
            {
                if (compute_ == null)
                {
                    Compute = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Compute.MergeFrom(other.Compute);
            }
            if (other.queue_ != null)
            {
                if (queue_ == null)
                {
                    Queue = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                }
                Queue.MergeFrom(other.Queue);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (success_ == null)
                            {
                                Success = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Success);
                            break;
                        }
                    case 18:
                        {
                            if (failed_ == null)
                            {
                                Failed = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Failed);
                            break;
                        }
                    case 26:
                        {
                            if (compute_ == null)
                            {
                                Compute = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Compute);
                            break;
                        }
                    case 34:
                        {
                            if (queue_ == null)
                            {
                                Queue = new global::Triton.MemoryAnalyzer.Client.StatDuration();
                            }
                            input.ReadMessage(Queue);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:enum:: ModelReadyStateReason
    ///@@
    ///@@   Detail associated with a model's readiness status.
    ///@@
    /// </summary>
    public sealed partial class ModelReadyStateReason : pb::IMessage<ModelReadyStateReason>
    {
        private static readonly pb::MessageParser<ModelReadyStateReason> _parser = new pb::MessageParser<ModelReadyStateReason>(() => new ModelReadyStateReason());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelReadyStateReason> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelReadyStateReason()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelReadyStateReason(ModelReadyStateReason other) : this()
        {
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelReadyStateReason Clone()
        {
            return new ModelReadyStateReason(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        /// <summary>
        ///@@  .. cpp:var:: string message
        ///@@
        ///@@     The message that explains the cause of being in the current readiness
        ///@@     state.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModelReadyStateReason);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelReadyStateReason other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelReadyStateReason other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message ModelVersionStatus
    ///@@
    ///@@   Status for a version of a model.
    ///@@
    /// </summary>
    public sealed partial class ModelVersionStatus : pb::IMessage<ModelVersionStatus>
    {
        private static readonly pb::MessageParser<ModelVersionStatus> _parser = new pb::MessageParser<ModelVersionStatus>(() => new ModelVersionStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelVersionStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelVersionStatus()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelVersionStatus(ModelVersionStatus other) : this()
        {
            readyState_ = other.readyState_;
            readyStateReason_ = other.readyStateReason_ != null ? other.readyStateReason_.Clone() : null;
            inferStats_ = other.inferStats_.Clone();
            modelExecutionCount_ = other.modelExecutionCount_;
            modelInferenceCount_ = other.modelInferenceCount_;
            lastInferenceTimestampMilliseconds_ = other.lastInferenceTimestampMilliseconds_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelVersionStatus Clone()
        {
            return new ModelVersionStatus(this);
        }

        /// <summary>Field number for the "ready_state" field.</summary>
        public const int ReadyStateFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.ModelReadyState readyState_ = 0;
        /// <summary>
        ///@@  .. cpp:var:: ModelReadyState ready_state
        ///@@
        ///@@     Current readiness state for the model.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.ModelReadyState ReadyState
        {
            get { return readyState_; }
            set
            {
                readyState_ = value;
            }
        }

        /// <summary>Field number for the "ready_state_reason" field.</summary>
        public const int ReadyStateReasonFieldNumber = 5;
        private global::Triton.MemoryAnalyzer.Client.ModelReadyStateReason readyStateReason_;
        /// <summary>
        ///@@  .. cpp:var:: ModelReadyStateReason ready_state_reason
        ///@@
        ///@@     Supplemental information regarding the current readiness state.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.ModelReadyStateReason ReadyStateReason
        {
            get { return readyStateReason_; }
            set
            {
                readyStateReason_ = value;
            }
        }

        /// <summary>Field number for the "infer_stats" field.</summary>
        public const int InferStatsFieldNumber = 2;
        private static readonly pbc::MapField<uint, global::Triton.MemoryAnalyzer.Client.InferRequestStats>.Codec _map_inferStats_codec
            = new pbc::MapField<uint, global::Triton.MemoryAnalyzer.Client.InferRequestStats>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::Triton.MemoryAnalyzer.Client.InferRequestStats.Parser), 18);
        private readonly pbc::MapField<uint, global::Triton.MemoryAnalyzer.Client.InferRequestStats> inferStats_ = new pbc::MapField<uint, global::Triton.MemoryAnalyzer.Client.InferRequestStats>();
        /// <summary>
        ///@@  .. cpp:var:: map&lt;uint32, InferRequestStats> infer_stats
        ///@@
        ///@@     Inference statistics for the model, as a map from batch size
        ///@@     to the statistics. A batch size will not occur in the map
        ///@@     unless there has been at least one inference request of
        ///@@     that batch size.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<uint, global::Triton.MemoryAnalyzer.Client.InferRequestStats> InferStats
        {
            get { return inferStats_; }
        }

        /// <summary>Field number for the "model_execution_count" field.</summary>
        public const int ModelExecutionCountFieldNumber = 3;
        private ulong modelExecutionCount_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 model_execution_count
        ///@@
        ///@@     Cumulative number of model executions performed for the
        ///@@     model. A single model execution performs inferencing for
        ///@@     the entire request batch and can perform inferencing for multiple
        ///@@     requests if dynamic batching is enabled.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ModelExecutionCount
        {
            get { return modelExecutionCount_; }
            set
            {
                modelExecutionCount_ = value;
            }
        }

        /// <summary>Field number for the "model_inference_count" field.</summary>
        public const int ModelInferenceCountFieldNumber = 4;
        private ulong modelInferenceCount_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 model_inference_count
        ///@@
        ///@@     Cumulative number of model inferences performed for the
        ///@@     model. Each inference in a batched request is counted as
        ///@@     an individual inference.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ModelInferenceCount
        {
            get { return modelInferenceCount_; }
            set
            {
                modelInferenceCount_ = value;
            }
        }

        /// <summary>Field number for the "last_inference_timestamp_milliseconds" field.</summary>
        public const int LastInferenceTimestampMillisecondsFieldNumber = 6;
        private ulong lastInferenceTimestampMilliseconds_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 last_inference_timestamp_milliseconds
        ///@@
        ///@@     The timestamp of the last inference request made for this model,
        ///@@     given as milliseconds since the epoch.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong LastInferenceTimestampMilliseconds
        {
            get { return lastInferenceTimestampMilliseconds_; }
            set
            {
                lastInferenceTimestampMilliseconds_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModelVersionStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelVersionStatus other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReadyState != other.ReadyState) return false;
            if (!object.Equals(ReadyStateReason, other.ReadyStateReason)) return false;
            if (!InferStats.Equals(other.InferStats)) return false;
            if (ModelExecutionCount != other.ModelExecutionCount) return false;
            if (ModelInferenceCount != other.ModelInferenceCount) return false;
            if (LastInferenceTimestampMilliseconds != other.LastInferenceTimestampMilliseconds) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReadyState != 0) hash ^= ReadyState.GetHashCode();
            if (readyStateReason_ != null) hash ^= ReadyStateReason.GetHashCode();
            hash ^= InferStats.GetHashCode();
            if (ModelExecutionCount != 0UL) hash ^= ModelExecutionCount.GetHashCode();
            if (ModelInferenceCount != 0UL) hash ^= ModelInferenceCount.GetHashCode();
            if (LastInferenceTimestampMilliseconds != 0UL) hash ^= LastInferenceTimestampMilliseconds.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReadyState != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ReadyState);
            }
            inferStats_.WriteTo(output, _map_inferStats_codec);
            if (ModelExecutionCount != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(ModelExecutionCount);
            }
            if (ModelInferenceCount != 0UL)
            {
                output.WriteRawTag(32);
                output.WriteUInt64(ModelInferenceCount);
            }
            if (readyStateReason_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(ReadyStateReason);
            }
            if (LastInferenceTimestampMilliseconds != 0UL)
            {
                output.WriteRawTag(48);
                output.WriteUInt64(LastInferenceTimestampMilliseconds);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReadyState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ReadyState);
            }
            if (readyStateReason_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadyStateReason);
            }
            size += inferStats_.CalculateSize(_map_inferStats_codec);
            if (ModelExecutionCount != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ModelExecutionCount);
            }
            if (ModelInferenceCount != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ModelInferenceCount);
            }
            if (LastInferenceTimestampMilliseconds != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastInferenceTimestampMilliseconds);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelVersionStatus other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReadyState != 0)
            {
                ReadyState = other.ReadyState;
            }
            if (other.readyStateReason_ != null)
            {
                if (readyStateReason_ == null)
                {
                    ReadyStateReason = new global::Triton.MemoryAnalyzer.Client.ModelReadyStateReason();
                }
                ReadyStateReason.MergeFrom(other.ReadyStateReason);
            }
            inferStats_.Add(other.inferStats_);
            if (other.ModelExecutionCount != 0UL)
            {
                ModelExecutionCount = other.ModelExecutionCount;
            }
            if (other.ModelInferenceCount != 0UL)
            {
                ModelInferenceCount = other.ModelInferenceCount;
            }
            if (other.LastInferenceTimestampMilliseconds != 0UL)
            {
                LastInferenceTimestampMilliseconds = other.LastInferenceTimestampMilliseconds;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ReadyState = (global::Triton.MemoryAnalyzer.Client.ModelReadyState)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            inferStats_.AddEntriesFrom(input, _map_inferStats_codec);
                            break;
                        }
                    case 24:
                        {
                            ModelExecutionCount = input.ReadUInt64();
                            break;
                        }
                    case 32:
                        {
                            ModelInferenceCount = input.ReadUInt64();
                            break;
                        }
                    case 42:
                        {
                            if (readyStateReason_ == null)
                            {
                                ReadyStateReason = new global::Triton.MemoryAnalyzer.Client.ModelReadyStateReason();
                            }
                            input.ReadMessage(ReadyStateReason);
                            break;
                        }
                    case 48:
                        {
                            LastInferenceTimestampMilliseconds = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message ModelStatus
    ///@@
    ///@@   Status for a model.
    ///@@
    /// </summary>
    public sealed partial class ModelStatus : pb::IMessage<ModelStatus>
    {
        private static readonly pb::MessageParser<ModelStatus> _parser = new pb::MessageParser<ModelStatus>(() => new ModelStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelStatus()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelStatus(ModelStatus other) : this()
        {
            config_ = other.config_ != null ? other.config_.Clone() : null;
            versionStatus_ = other.versionStatus_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelStatus Clone()
        {
            return new ModelStatus(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Triton.MemoryAnalyzer.Client.ModelConfig config_;
        /// <summary>
        ///@@  .. cpp:var:: ModelConfig config
        ///@@
        ///@@     The configuration for the model.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.ModelConfig Config
        {
            get { return config_; }
            set
            {
                config_ = value;
            }
        }

        /// <summary>Field number for the "version_status" field.</summary>
        public const int VersionStatusFieldNumber = 2;
        private static readonly pbc::MapField<long, global::Triton.MemoryAnalyzer.Client.ModelVersionStatus>.Codec _map_versionStatus_codec
            = new pbc::MapField<long, global::Triton.MemoryAnalyzer.Client.ModelVersionStatus>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Triton.MemoryAnalyzer.Client.ModelVersionStatus.Parser), 18);
        private readonly pbc::MapField<long, global::Triton.MemoryAnalyzer.Client.ModelVersionStatus> versionStatus_ = new pbc::MapField<long, global::Triton.MemoryAnalyzer.Client.ModelVersionStatus>();
        /// <summary>
        ///@@  .. cpp:var:: map&lt;int64, ModelVersionStatus> version_status
        ///@@
        ///@@     Duration statistics for each version of the model, as a map
        ///@@     from version to the status. A version will not occur in the map
        ///@@     unless there has been at least one inference request of
        ///@@     that model version. A version of -1 indicates the status is
        ///@@     for requests for which the version could not be determined.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<long, global::Triton.MemoryAnalyzer.Client.ModelVersionStatus> VersionStatus
        {
            get { return versionStatus_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModelStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelStatus other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Config, other.Config)) return false;
            if (!VersionStatus.Equals(other.VersionStatus)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (config_ != null) hash ^= Config.GetHashCode();
            hash ^= VersionStatus.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (config_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Config);
            }
            versionStatus_.WriteTo(output, _map_versionStatus_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (config_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
            }
            size += versionStatus_.CalculateSize(_map_versionStatus_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelStatus other)
        {
            if (other == null)
            {
                return;
            }
            if (other.config_ != null)
            {
                if (config_ == null)
                {
                    Config = new global::Triton.MemoryAnalyzer.Client.ModelConfig();
                }
                Config.MergeFrom(other.Config);
            }
            versionStatus_.Add(other.versionStatus_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (config_ == null)
                            {
                                Config = new global::Triton.MemoryAnalyzer.Client.ModelConfig();
                            }
                            input.ReadMessage(Config);
                            break;
                        }
                    case 18:
                        {
                            versionStatus_.AddEntriesFrom(input, _map_versionStatus_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@.. cpp:var:: message SharedMemoryRegion
    ///@@
    ///@@   The meta-data for the shared memory region registered in the inference
    ///@@   server.
    ///@@
    /// </summary>
    public sealed partial class SharedMemoryRegion : pb::IMessage<SharedMemoryRegion>
    {
        private static readonly pb::MessageParser<SharedMemoryRegion> _parser = new pb::MessageParser<SharedMemoryRegion>(() => new SharedMemoryRegion());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SharedMemoryRegion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryRegion()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryRegion(SharedMemoryRegion other) : this()
        {
            name_ = other.name_;
            byteSize_ = other.byteSize_;
            switch (other.SharedMemoryTypesCase)
            {
                case SharedMemoryTypesOneofCase.SystemSharedMemory:
                    SystemSharedMemory = other.SystemSharedMemory.Clone();
                    break;
                case SharedMemoryTypesOneofCase.CudaSharedMemory:
                    CudaSharedMemory = other.CudaSharedMemory.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryRegion Clone()
        {
            return new SharedMemoryRegion(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: string name
        ///@@
        ///@@     The name for this shared memory region.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "system_shared_memory" field.</summary>
        public const int SystemSharedMemoryFieldNumber = 2;
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: SystemSharedMemory system_shared_memory
        ///@@
        ///@@     The status of this system shared memory region.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory SystemSharedMemory
        {
            get { return sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory)sharedMemoryTypes_ : null; }
            set
            {
                sharedMemoryTypes_ = value;
                sharedMemoryTypesCase_ = value == null ? SharedMemoryTypesOneofCase.None : SharedMemoryTypesOneofCase.SystemSharedMemory;
            }
        }

        /// <summary>Field number for the "cuda_shared_memory" field.</summary>
        public const int CudaSharedMemoryFieldNumber = 3;
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: CudaSharedMemory cuda_shared_memory
        ///@@
        ///@@     The status of this CUDA shared memory region.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory CudaSharedMemory
        {
            get { return sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory ? (global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory)sharedMemoryTypes_ : null; }
            set
            {
                sharedMemoryTypes_ = value;
                sharedMemoryTypesCase_ = value == null ? SharedMemoryTypesOneofCase.None : SharedMemoryTypesOneofCase.CudaSharedMemory;
            }
        }

        /// <summary>Field number for the "byte_size" field.</summary>
        public const int ByteSizeFieldNumber = 5;
        private ulong byteSize_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 byte_size
        ///@@
        ///@@     Size of the shared memory block, in bytes.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ByteSize
        {
            get { return byteSize_; }
            set
            {
                byteSize_ = value;
            }
        }

        private object sharedMemoryTypes_;
        /// <summary>Enum of possible cases for the "shared_memory_types" oneof.</summary>
        public enum SharedMemoryTypesOneofCase
        {
            None = 0,
            SystemSharedMemory = 2,
            CudaSharedMemory = 3,
        }
        private SharedMemoryTypesOneofCase sharedMemoryTypesCase_ = SharedMemoryTypesOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryTypesOneofCase SharedMemoryTypesCase
        {
            get { return sharedMemoryTypesCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSharedMemoryTypes()
        {
            sharedMemoryTypesCase_ = SharedMemoryTypesOneofCase.None;
            sharedMemoryTypes_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SharedMemoryRegion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SharedMemoryRegion other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (!object.Equals(SystemSharedMemory, other.SystemSharedMemory)) return false;
            if (!object.Equals(CudaSharedMemory, other.CudaSharedMemory)) return false;
            if (ByteSize != other.ByteSize) return false;
            if (SharedMemoryTypesCase != other.SharedMemoryTypesCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory) hash ^= SystemSharedMemory.GetHashCode();
            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory) hash ^= CudaSharedMemory.GetHashCode();
            if (ByteSize != 0UL) hash ^= ByteSize.GetHashCode();
            hash ^= (int)sharedMemoryTypesCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Name.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory)
            {
                output.WriteRawTag(18);
                output.WriteMessage(SystemSharedMemory);
            }
            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory)
            {
                output.WriteRawTag(26);
                output.WriteMessage(CudaSharedMemory);
            }
            if (ByteSize != 0UL)
            {
                output.WriteRawTag(40);
                output.WriteUInt64(ByteSize);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemSharedMemory);
            }
            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CudaSharedMemory);
            }
            if (ByteSize != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ByteSize);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SharedMemoryRegion other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.ByteSize != 0UL)
            {
                ByteSize = other.ByteSize;
            }
            switch (other.SharedMemoryTypesCase)
            {
                case SharedMemoryTypesOneofCase.SystemSharedMemory:
                    if (SystemSharedMemory == null)
                    {
                        SystemSharedMemory = new global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory();
                    }
                    SystemSharedMemory.MergeFrom(other.SystemSharedMemory);
                    break;
                case SharedMemoryTypesOneofCase.CudaSharedMemory:
                    if (CudaSharedMemory == null)
                    {
                        CudaSharedMemory = new global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory();
                    }
                    CudaSharedMemory.MergeFrom(other.CudaSharedMemory);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.SystemSharedMemory();
                            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.SystemSharedMemory)
                            {
                                subBuilder.MergeFrom(SystemSharedMemory);
                            }
                            input.ReadMessage(subBuilder);
                            SystemSharedMemory = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory subBuilder = new global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Types.CudaSharedMemory();
                            if (sharedMemoryTypesCase_ == SharedMemoryTypesOneofCase.CudaSharedMemory)
                            {
                                subBuilder.MergeFrom(CudaSharedMemory);
                            }
                            input.ReadMessage(subBuilder);
                            CudaSharedMemory = subBuilder;
                            break;
                        }
                    case 40:
                        {
                            ByteSize = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SharedMemoryRegion message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class SystemSharedMemory : pb::IMessage<SystemSharedMemory>
            {
                private static readonly pb::MessageParser<SystemSharedMemory> _parser = new pb::MessageParser<SystemSharedMemory>(() => new SystemSharedMemory());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SystemSharedMemory> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SystemSharedMemory()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SystemSharedMemory(SystemSharedMemory other) : this()
                {
                    sharedMemoryKey_ = other.sharedMemoryKey_;
                    offset_ = other.offset_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SystemSharedMemory Clone()
                {
                    return new SystemSharedMemory(this);
                }

                /// <summary>Field number for the "shared_memory_key" field.</summary>
                public const int SharedMemoryKeyFieldNumber = 1;
                private string sharedMemoryKey_ = "";
                /// <summary>
                ///@@  .. cpp:var:: string shared_memory_key
                ///@@
                ///@@     The name of the shared memory region that holds the input data
                ///@@     (or where the output data should be written).
                ///@@
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SharedMemoryKey
                {
                    get { return sharedMemoryKey_; }
                    set
                    {
                        sharedMemoryKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "offset" field.</summary>
                public const int OffsetFieldNumber = 2;
                private ulong offset_;
                /// <summary>
                ///@@  .. cpp:var:: uint64 offset
                ///@@
                ///@@     This is the offset of the shared memory block from the start
                ///@@     of the shared memory region.
                ///@@     start = offset, end = offset + byte_size;
                ///@@
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong Offset
                {
                    get { return offset_; }
                    set
                    {
                        offset_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as SystemSharedMemory);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SystemSharedMemory other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (SharedMemoryKey != other.SharedMemoryKey) return false;
                    if (Offset != other.Offset) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (SharedMemoryKey.Length != 0) hash ^= SharedMemoryKey.GetHashCode();
                    if (Offset != 0UL) hash ^= Offset.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (SharedMemoryKey.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(SharedMemoryKey);
                    }
                    if (Offset != 0UL)
                    {
                        output.WriteRawTag(16);
                        output.WriteUInt64(Offset);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (SharedMemoryKey.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SharedMemoryKey);
                    }
                    if (Offset != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SystemSharedMemory other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.SharedMemoryKey.Length != 0)
                    {
                        SharedMemoryKey = other.SharedMemoryKey;
                    }
                    if (other.Offset != 0UL)
                    {
                        Offset = other.Offset;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    SharedMemoryKey = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    Offset = input.ReadUInt64();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class CudaSharedMemory : pb::IMessage<CudaSharedMemory>
            {
                private static readonly pb::MessageParser<CudaSharedMemory> _parser = new pb::MessageParser<CudaSharedMemory>(() => new CudaSharedMemory());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<CudaSharedMemory> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CudaSharedMemory()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CudaSharedMemory(CudaSharedMemory other) : this()
                {
                    deviceId_ = other.deviceId_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CudaSharedMemory Clone()
                {
                    return new CudaSharedMemory(this);
                }

                /// <summary>Field number for the "device_id" field.</summary>
                public const int DeviceIdFieldNumber = 1;
                private long deviceId_;
                /// <summary>
                ///@@  .. cpp:var:: int64 device_id
                ///@@
                ///@@     The GPU device ID on which the cudaIPC handle was created.
                ///@@
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long DeviceId
                {
                    get { return deviceId_; }
                    set
                    {
                        deviceId_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as CudaSharedMemory);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(CudaSharedMemory other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (DeviceId != other.DeviceId) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (DeviceId != 0L) hash ^= DeviceId.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (DeviceId != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(DeviceId);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (DeviceId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeviceId);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(CudaSharedMemory other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.DeviceId != 0L)
                    {
                        DeviceId = other.DeviceId;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    DeviceId = input.ReadInt64();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message ServerStatus
    ///@@
    ///@@   Status for the inference server.
    ///@@
    /// </summary>
    public sealed partial class ServerStatus : pb::IMessage<ServerStatus>
    {
        private static readonly pb::MessageParser<ServerStatus> _parser = new pb::MessageParser<ServerStatus>(() => new ServerStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerStatus()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerStatus(ServerStatus other) : this()
        {
            id_ = other.id_;
            version_ = other.version_;
            readyState_ = other.readyState_;
            uptimeNs_ = other.uptimeNs_;
            modelStatus_ = other.modelStatus_.Clone();
            statusStats_ = other.statusStats_ != null ? other.statusStats_.Clone() : null;
            healthStats_ = other.healthStats_ != null ? other.healthStats_.Clone() : null;
            modelControlStats_ = other.modelControlStats_ != null ? other.modelControlStats_.Clone() : null;
            shmControlStats_ = other.shmControlStats_ != null ? other.shmControlStats_.Clone() : null;
            repositoryStats_ = other.repositoryStats_ != null ? other.repositoryStats_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerStatus Clone()
        {
            return new ServerStatus(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        ///@@  .. cpp:var:: string id
        ///@@
        ///@@     The server's ID.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private string version_ = "";
        /// <summary>
        ///@@  .. cpp:var:: string version
        ///@@
        ///@@     The server's version.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version
        {
            get { return version_; }
            set
            {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ready_state" field.</summary>
        public const int ReadyStateFieldNumber = 7;
        private global::Triton.MemoryAnalyzer.Client.ServerReadyState readyState_ = 0;
        /// <summary>
        ///@@  .. cpp:var:: ServerReadyState ready_state
        ///@@
        ///@@     Current readiness state for the server.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.ServerReadyState ReadyState
        {
            get { return readyState_; }
            set
            {
                readyState_ = value;
            }
        }

        /// <summary>Field number for the "uptime_ns" field.</summary>
        public const int UptimeNsFieldNumber = 3;
        private ulong uptimeNs_;
        /// <summary>
        ///@@  .. cpp:var:: uint64 uptime_ns
        ///@@
        ///@@     Server uptime in nanoseconds.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UptimeNs
        {
            get { return uptimeNs_; }
            set
            {
                uptimeNs_ = value;
            }
        }

        /// <summary>Field number for the "model_status" field.</summary>
        public const int ModelStatusFieldNumber = 4;
        private static readonly pbc::MapField<string, global::Triton.MemoryAnalyzer.Client.ModelStatus>.Codec _map_modelStatus_codec
            = new pbc::MapField<string, global::Triton.MemoryAnalyzer.Client.ModelStatus>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Triton.MemoryAnalyzer.Client.ModelStatus.Parser), 34);
        private readonly pbc::MapField<string, global::Triton.MemoryAnalyzer.Client.ModelStatus> modelStatus_ = new pbc::MapField<string, global::Triton.MemoryAnalyzer.Client.ModelStatus>();
        /// <summary>
        ///@@  .. cpp:var:: map&lt;string, ModelStatus> model_status
        ///@@
        ///@@     Status for each model, as a map from model name to the
        ///@@     status.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::Triton.MemoryAnalyzer.Client.ModelStatus> ModelStatus
        {
            get { return modelStatus_; }
        }

        /// <summary>Field number for the "status_stats" field.</summary>
        public const int StatusStatsFieldNumber = 5;
        private global::Triton.MemoryAnalyzer.Client.StatusRequestStats statusStats_;
        /// <summary>
        ///@@  .. cpp:var:: StatusRequestStats status_stats
        ///@@
        ///@@     Statistics for Status requests.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.StatusRequestStats StatusStats
        {
            get { return statusStats_; }
            set
            {
                statusStats_ = value;
            }
        }

        /// <summary>Field number for the "health_stats" field.</summary>
        public const int HealthStatsFieldNumber = 8;
        private global::Triton.MemoryAnalyzer.Client.HealthRequestStats healthStats_;
        /// <summary>
        ///@@  .. cpp:var:: HealthRequestStats health_stats
        ///@@
        ///@@     Statistics for Health requests.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.HealthRequestStats HealthStats
        {
            get { return healthStats_; }
            set
            {
                healthStats_ = value;
            }
        }

        /// <summary>Field number for the "model_control_stats" field.</summary>
        public const int ModelControlStatsFieldNumber = 9;
        private global::Triton.MemoryAnalyzer.Client.ModelControlRequestStats modelControlStats_;
        /// <summary>
        ///@@  .. cpp:var:: ModelControlRequestStats model_control_stats
        ///@@
        ///@@     Statistics for ModelControl requests.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.ModelControlRequestStats ModelControlStats
        {
            get { return modelControlStats_; }
            set
            {
                modelControlStats_ = value;
            }
        }

        /// <summary>Field number for the "shm_control_stats" field.</summary>
        public const int ShmControlStatsFieldNumber = 10;
        private global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequestStats shmControlStats_;
        /// <summary>
        ///@@  .. cpp:var:: SharedMemoryControlRequestStats shm_control_stats
        ///@@
        ///@@     Statistics for SharedMemoryControl requests.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequestStats ShmControlStats
        {
            get { return shmControlStats_; }
            set
            {
                shmControlStats_ = value;
            }
        }

        /// <summary>Field number for the "repository_stats" field.</summary>
        public const int RepositoryStatsFieldNumber = 11;
        private global::Triton.MemoryAnalyzer.Client.RepositoryRequestStats repositoryStats_;
        /// <summary>
        ///@@  .. cpp:var:: RepositoryRequestStats repository_stats
        ///@@
        ///@@     Statistics for Repository requests.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Triton.MemoryAnalyzer.Client.RepositoryRequestStats RepositoryStats
        {
            get { return repositoryStats_; }
            set
            {
                repositoryStats_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ServerStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerStatus other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Version != other.Version) return false;
            if (ReadyState != other.ReadyState) return false;
            if (UptimeNs != other.UptimeNs) return false;
            if (!ModelStatus.Equals(other.ModelStatus)) return false;
            if (!object.Equals(StatusStats, other.StatusStats)) return false;
            if (!object.Equals(HealthStats, other.HealthStats)) return false;
            if (!object.Equals(ModelControlStats, other.ModelControlStats)) return false;
            if (!object.Equals(ShmControlStats, other.ShmControlStats)) return false;
            if (!object.Equals(RepositoryStats, other.RepositoryStats)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (Version.Length != 0) hash ^= Version.GetHashCode();
            if (ReadyState != 0) hash ^= ReadyState.GetHashCode();
            if (UptimeNs != 0UL) hash ^= UptimeNs.GetHashCode();
            hash ^= ModelStatus.GetHashCode();
            if (statusStats_ != null) hash ^= StatusStats.GetHashCode();
            if (healthStats_ != null) hash ^= HealthStats.GetHashCode();
            if (modelControlStats_ != null) hash ^= ModelControlStats.GetHashCode();
            if (shmControlStats_ != null) hash ^= ShmControlStats.GetHashCode();
            if (repositoryStats_ != null) hash ^= RepositoryStats.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Id);
            }
            if (Version.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Version);
            }
            if (UptimeNs != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(UptimeNs);
            }
            modelStatus_.WriteTo(output, _map_modelStatus_codec);
            if (statusStats_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(StatusStats);
            }
            if (ReadyState != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)ReadyState);
            }
            if (healthStats_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(HealthStats);
            }
            if (modelControlStats_ != null)
            {
                output.WriteRawTag(74);
                output.WriteMessage(ModelControlStats);
            }
            if (shmControlStats_ != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(ShmControlStats);
            }
            if (repositoryStats_ != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(RepositoryStats);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }
            if (ReadyState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ReadyState);
            }
            if (UptimeNs != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UptimeNs);
            }
            size += modelStatus_.CalculateSize(_map_modelStatus_codec);
            if (statusStats_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusStats);
            }
            if (healthStats_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(HealthStats);
            }
            if (modelControlStats_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelControlStats);
            }
            if (shmControlStats_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShmControlStats);
            }
            if (repositoryStats_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepositoryStats);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerStatus other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.Version.Length != 0)
            {
                Version = other.Version;
            }
            if (other.ReadyState != 0)
            {
                ReadyState = other.ReadyState;
            }
            if (other.UptimeNs != 0UL)
            {
                UptimeNs = other.UptimeNs;
            }
            modelStatus_.Add(other.modelStatus_);
            if (other.statusStats_ != null)
            {
                if (statusStats_ == null)
                {
                    StatusStats = new global::Triton.MemoryAnalyzer.Client.StatusRequestStats();
                }
                StatusStats.MergeFrom(other.StatusStats);
            }
            if (other.healthStats_ != null)
            {
                if (healthStats_ == null)
                {
                    HealthStats = new global::Triton.MemoryAnalyzer.Client.HealthRequestStats();
                }
                HealthStats.MergeFrom(other.HealthStats);
            }
            if (other.modelControlStats_ != null)
            {
                if (modelControlStats_ == null)
                {
                    ModelControlStats = new global::Triton.MemoryAnalyzer.Client.ModelControlRequestStats();
                }
                ModelControlStats.MergeFrom(other.ModelControlStats);
            }
            if (other.shmControlStats_ != null)
            {
                if (shmControlStats_ == null)
                {
                    ShmControlStats = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequestStats();
                }
                ShmControlStats.MergeFrom(other.ShmControlStats);
            }
            if (other.repositoryStats_ != null)
            {
                if (repositoryStats_ == null)
                {
                    RepositoryStats = new global::Triton.MemoryAnalyzer.Client.RepositoryRequestStats();
                }
                RepositoryStats.MergeFrom(other.RepositoryStats);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Version = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            UptimeNs = input.ReadUInt64();
                            break;
                        }
                    case 34:
                        {
                            modelStatus_.AddEntriesFrom(input, _map_modelStatus_codec);
                            break;
                        }
                    case 42:
                        {
                            if (statusStats_ == null)
                            {
                                StatusStats = new global::Triton.MemoryAnalyzer.Client.StatusRequestStats();
                            }
                            input.ReadMessage(StatusStats);
                            break;
                        }
                    case 56:
                        {
                            ReadyState = (global::Triton.MemoryAnalyzer.Client.ServerReadyState)input.ReadEnum();
                            break;
                        }
                    case 66:
                        {
                            if (healthStats_ == null)
                            {
                                HealthStats = new global::Triton.MemoryAnalyzer.Client.HealthRequestStats();
                            }
                            input.ReadMessage(HealthStats);
                            break;
                        }
                    case 74:
                        {
                            if (modelControlStats_ == null)
                            {
                                ModelControlStats = new global::Triton.MemoryAnalyzer.Client.ModelControlRequestStats();
                            }
                            input.ReadMessage(ModelControlStats);
                            break;
                        }
                    case 82:
                        {
                            if (shmControlStats_ == null)
                            {
                                ShmControlStats = new global::Triton.MemoryAnalyzer.Client.SharedMemoryControlRequestStats();
                            }
                            input.ReadMessage(ShmControlStats);
                            break;
                        }
                    case 90:
                        {
                            if (repositoryStats_ == null)
                            {
                                RepositoryStats = new global::Triton.MemoryAnalyzer.Client.RepositoryRequestStats();
                            }
                            input.ReadMessage(RepositoryStats);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message SharedMemoryStatus
    ///@@
    ///@@   Shared memory status for the inference server.
    ///@@
    /// </summary>
    public sealed partial class SharedMemoryStatus : pb::IMessage<SharedMemoryStatus>
    {
        private static readonly pb::MessageParser<SharedMemoryStatus> _parser = new pb::MessageParser<SharedMemoryStatus>(() => new SharedMemoryStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SharedMemoryStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryStatus()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryStatus(SharedMemoryStatus other) : this()
        {
            sharedMemoryRegion_ = other.sharedMemoryRegion_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SharedMemoryStatus Clone()
        {
            return new SharedMemoryStatus(this);
        }

        /// <summary>Field number for the "shared_memory_region" field.</summary>
        public const int SharedMemoryRegionFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion> _repeated_sharedMemoryRegion_codec
            = pb::FieldCodec.ForMessage(18, global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion.Parser);
        private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion> sharedMemoryRegion_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion>();
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: SharedMemoryRegion shared_memory_region (repeated)
        ///@@
        ///@@     The list of active/registered shared memory regions.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.SharedMemoryRegion> SharedMemoryRegion
        {
            get { return sharedMemoryRegion_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SharedMemoryStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SharedMemoryStatus other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!sharedMemoryRegion_.Equals(other.sharedMemoryRegion_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= sharedMemoryRegion_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            sharedMemoryRegion_.WriteTo(output, _repeated_sharedMemoryRegion_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += sharedMemoryRegion_.CalculateSize(_repeated_sharedMemoryRegion_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SharedMemoryStatus other)
        {
            if (other == null)
            {
                return;
            }
            sharedMemoryRegion_.Add(other.sharedMemoryRegion_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 18:
                        {
                            sharedMemoryRegion_.AddEntriesFrom(input, _repeated_sharedMemoryRegion_codec);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///@@
    ///@@.. cpp:var:: message ModelRepositoryIndex
    ///@@
    ///@@   Index of the model repository monitored by the inference server.
    ///@@
    /// </summary>
    public sealed partial class ModelRepositoryIndex : pb::IMessage<ModelRepositoryIndex>
    {
        private static readonly pb::MessageParser<ModelRepositoryIndex> _parser = new pb::MessageParser<ModelRepositoryIndex>(() => new ModelRepositoryIndex());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelRepositoryIndex> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Triton.MemoryAnalyzer.Client.ServerStatusReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelRepositoryIndex()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelRepositoryIndex(ModelRepositoryIndex other) : this()
        {
            models_ = other.models_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelRepositoryIndex Clone()
        {
            return new ModelRepositoryIndex(this);
        }

        /// <summary>Field number for the "models" field.</summary>
        public const int ModelsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry> _repeated_models_codec
            = pb::FieldCodec.ForMessage(10, global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry.Parser);
        private readonly pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry> models_ = new pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry>();
        /// <summary>
        ///@@
        ///@@  .. cpp:var:: ModelEntry models (repeated)
        ///@@
        ///@@     The list of models in the model repository.
        ///@@
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Types.ModelEntry> Models
        {
            get { return models_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ModelRepositoryIndex);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelRepositoryIndex other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!models_.Equals(other.models_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= models_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            models_.WriteTo(output, _repeated_models_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += models_.CalculateSize(_repeated_models_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelRepositoryIndex other)
        {
            if (other == null)
            {
                return;
            }
            models_.Add(other.models_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            models_.AddEntriesFrom(input, _repeated_models_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ModelRepositoryIndex message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            /// <summary>
            ///@@
            ///@@  .. cpp:var:: message ModelEntry
            ///@@
            ///@@     The basic information for a model.
            ///@@
            /// </summary>
            public sealed partial class ModelEntry : pb::IMessage<ModelEntry>
            {
                private static readonly pb::MessageParser<ModelEntry> _parser = new pb::MessageParser<ModelEntry>(() => new ModelEntry());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ModelEntry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Triton.MemoryAnalyzer.Client.ModelRepositoryIndex.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ModelEntry()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ModelEntry(ModelEntry other) : this()
                {
                    name_ = other.name_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ModelEntry Clone()
                {
                    return new ModelEntry(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                /// <summary>
                ///@@    .. cpp:var:: string name
                ///@@
                ///@@       The model's name.
                ///@@
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name
                {
                    get { return name_; }
                    set
                    {
                        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as ModelEntry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ModelEntry other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Name != other.Name) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Name.Length != 0) hash ^= Name.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Name.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Name);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Name.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ModelEntry other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Name.Length != 0)
                    {
                        Name = other.Name;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Name = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    #endregion

}

#endregion Designer generated code
